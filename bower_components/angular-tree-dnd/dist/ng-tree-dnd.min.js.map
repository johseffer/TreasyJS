{"version":3,"sources":["ng-tree-dnd.js"],"names":["angular","isUndefinedOrNull","val","isUndefined","isDefined","module","constant","tree","empty","hidden","node","nodes","handle","place","drag","status","icon","1","0","-1","directive","$compile","restrict","link","scope","element","attrs","$watch","compile","new_val","isFunction","html","append","compileReplace","replaceWith","$type","$class","addClass","$TreeDnDViewport","replace","$node_class","childsElem","enabledDnD","dragEnabled","dropEnabled","keyNode","treeDndNode","first","add","getData","$element","__inited__","getElementChilds","querySelector","setScope","getScopeNode","objexpr","i","objprops","keyO","Object","keys","lenO","length","hashKey","__hashKey__","skipAttr","keepAttr","lenKeep","indexOf","push","join","newVal","oldVal","_icon","nodeOf","__icon__","__icon_class__","_i","parentReal","__parent_real__","parentNode","tree_nodes","_childs","__children__","_len","deleteScope","__expanded__","__visible__","removeClass","isTable","for_all_descendants","hiddenChild","$on","$nodes_class","fnInitTreeDnD","$inject","$timeout","$http","$parse","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","controller","$scope","$attrs","indent","indent_plus","indent_unit","$tree_class","primary_key","colDefinitions","$globals","treeData","copy","extend","iconExpand","iconCollapse","iconLeaf","fn","parent","checkSibling","_nodes","getLastDescendant","last_child","n","selected_node","onClick","on_click","setTimeout","onSelect","select_node","on_select","passedExpand","_clone","toggleExpand","fnCallback","$callbacks","expand","_fnGetHash","__parent__","getHash","setHash","_hashKey","accept","calsIndent","level","skipUnit","skipEdge","unit","edge","droppable","draggable","beforeDrop","changeKey","_key","__uid__","Math","random","__selected__","clone","this","remove","_this","delayReload","temp","splice","__index__","reload_data","clearInfo","pos","_hash","getScope","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","dragStop","info","passed","changed","target","dropped","_node","_nodeAdd","_move","move","_parent","_parentRemove","_parentAdd","isMove","dragStart","event","dragMove","setDragging","dragInfo","enableMove","enableStatus","enabledStatus","hideStatus","refreshStatus","statusElmOld","getMove","getCopy","attr","find","setPositionStatus","e","css","left","pageX","top","pageY","z-index","targeting","getPrevSibling","_index","getNode","index","initPlace","dragElm","document","createElement","_len_down","height","insertBefore","hidePlace","showPlace","getScopeTree","$safeApply","phase","$root","$$phase","$apply","nodeScope","_fnInitFilter","_fnInitOrderBy","_fnGetControl","w","len","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","timeReloadData","tmpTreeData","_defaultFilterOption","showParent","showChild","beginAnd","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","test","trim","getExpandOn","expandOn","expandingProperty","$tree","getColDefs","colDefs","isArray","orderBy","filters","_passed","_iF","_keysF","_lenF","enabledFilter","option","isObject","filterOptions","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","check_exist_attr","generateWatch","equals","timeLoadData","updateLimit","$TreeLimit","existAttr","isAnd","exist","for_each_attrs","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","_firstNode","_keys","_regex","RegExp","_col_defs","field","do_f","root","parent_real","visible","_index_real","_dept","expandLevel","__index_real__","__level__","__dept__","init_data","data","oData","_data","_tree_nodes","columnDefs","filter","tElement","$_Template","_element","_fnInitDrag","ready","checkTreeTable","template","attrInclude","elemNode","treeInclude","cache","then","response","tempDiv","innerHTML","setTemplate","templateNode","promiseCheck","templateUrl","getPath","factory","line2tree","parentKey","callback","parentId","rootIds","item","_primary","treeObjs","tree2tree","access_child","containKey","_copy","_child","_tree","nodrag","targetElm","eventObj","obj","undefined","targetTouches","originalEvent","drop","prop","width","offset","boundingClientRect","getBoundingClientRect","pageYOffset","body","scrollTop","documentElement","pageXOffset","scrollLeft","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","abs","moving","replaceIndent","children","$injector","name","has","scopes","path","$id","movePath","copyPath","fnInitTreeDnDViewport","$q","updateTimeout","renderTime","viewport","isUpdating","isRender","updateAgain","items","$initViewport","setViewport","getViewport","updateDelayed","getItems","eWindow","on","update","clientWidth","clientHeight","recursivePromise","number","cancel","$filter","options","keyChild","_filter","_fnConvert","_fnBeforeClear","_fnAfter","filter_index","_fnBefore","fieldChild","parentPassed","_nodePassed","_childPassed","_filter_index","_fnCheck","err","_fnProccess","condition","conditions","for_each_filter","_iO","_keysO","_lenO","_callback","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","__filtered_index__","_state","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","_fnDragMove","$params","_$scope","dragStarted","preventDefault","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","document_height","document_width","offsetEdge","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_scope","_target","fnSwapTree","targetX","targetY","isChanged","isVeritcal","_info","_drag","_drop","treeScope","isHolder","_offset","_fnPlaceHolder","elementFromPoint","_height","_prev","dragBorder","after","prepend","dragDelaying","_fnDragEnd","$$apply","_status","clearData","_fnBindDrag","unbind","dragEndEvent","dragMoveEvent","dragCancelEvent","_fnDragStartEvent","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","dragScope","eventElmTagName","toLowerCase","_tbody","_frag","_width","_needCollapse","_copied","createDocumentFragment","bind","max","scrollHeight","offsetHeight","scrollWidth","offsetWidth","_fnDragStart","dragTimer","bindDrag","dragEnd","keydownHandler","keyCode","shiftKey","_fnKeydownHandler","keyupHandler","_fnKeyupHandler","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","collapse_all_parents","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","firstNode","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\n * The MIT License (MIT)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n * @preserve\n */\n\n/**\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\n * Github: https://github.com/thienhung1989/angular-tree-dnd\n * @version 3.0.6\n * @preserve\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\n */\n(function () {\n    'use strict';\n    angular.isUndefinedOrNull = isUndefinedOrNull;\n\n    angular.isDefined = isDefined;\n\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html'])\n        .constant('$TreeDnDClass', {\n            tree:   'tree-dnd',\n            empty:  'tree-dnd-empty',\n            hidden: 'tree-dnd-hidden',\n            node:   'tree-dnd-node',\n            nodes:  'tree-dnd-nodes',\n            handle: 'tree-dnd-handle',\n            place:  'tree-dnd-placeholder',\n            drag:   'tree-dnd-drag',\n            status: 'tree-dnd-status',\n            icon:   {\n                '1':  'glyphicon glyphicon-minus',\n                '0':  'glyphicon glyphicon-plus',\n                '-1': 'glyphicon glyphicon-file'\n            }\n        });angular.module('ntt.TreeDnD')\n    .directive('compile', [\n        '$compile',\n        function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compile, function (new_val) {\n                            if (new_val) {\n                                if (angular.isFunction(element.empty)) {\n                                    element.empty();\n                                } else {\n                                    element.html('');\n                                }\n\n                                element.append($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n    )\n    .directive('compileReplace', [\n        '$compile',\n        function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compileReplace, function (new_val) {\n                            if (new_val) {\n                                element.replaceWith($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\r    .directive('treeDndNodeHandle', function () {\r        return {\r            restrict: 'A',\r            scope:    true,\r            link:     function (scope, element/*, attrs*/) {\r                scope.$type = 'TreeDnDNodeHandle';\r                if (scope.$class.handle) {\r                    element.addClass(scope.$class.handle);\r                }\r            }\r        };\r    });\n\nangular.module('ntt.TreeDnD')\n    .directive('treeDndNode', [\n        '$TreeDnDViewport',\n        function ($TreeDnDViewport) {\n            return {\n                restrict: 'A',\n                replace:  true,\n                link:     fnLink\n            };\n\n            function fnLink(scope, element, attrs) {\n\n                scope.$node_class = '';\n\n                if (scope.$class.node) {\n                    element.addClass(scope.$class.node);\n                    scope.$node_class = scope.$class.node;\n                }\n                var enabledDnD = typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean',\n                    keyNode    = attrs.treeDndNode,\n                    first      = true,\n                    childsElem;\n                $TreeDnDViewport.add(scope, element);\n\n                if (enabledDnD) {\n                    scope.$type = 'TreeDnDNode';\n\n                    scope.getData = function () {\n                        return scope[keyNode];\n                    };\n                }\n\n                scope.$element            = element;\n                scope[keyNode].__inited__ = true;\n\n                scope.getElementChilds = function () {\n                    return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\n                };\n\n                scope.setScope(scope, scope[keyNode]);\n\n                scope.getScopeNode = function () {\n                    return scope;\n                };\n\n                var objprops = [],\n                    objexpr,\n                    i, keyO  = Object.keys(scope[keyNode]),\n                    lenO     = keyO.length,\n                    hashKey  = scope[keyNode].__hashKey__,\n                    skipAttr = [\n                        '__visible__',\n                        '__children__',\n                        '__level__',\n                        '__index__',\n                        '__index_real__',\n\n                        '__parent__',\n                        '__parent_real__',\n                        '__dept__',\n                        '__icon__',\n                        '__icon_class__'\n                    ],\n                    keepAttr = [\n                        '__expanded__'\n                    ],\n                    lenKeep  = keepAttr.length;\n\n                // skip __visible__\n                for (i = 0; i < lenO + lenKeep; i++) {\n                    if (i < lenO) {\n                        if (skipAttr.indexOf(keyO[i]) === -1) {\n                            objprops.push(keyNode + '.' + keyO[i]);\n                        }\n                    } else {\n                        if (keyO.indexOf(keepAttr[i - lenO]) === -1) {\n                            objprops.push(keyNode + '.' + keepAttr[i - lenO]);\n                        }\n                    }\n                }\n\n                objexpr = '[' + objprops.join(',') + ']';\n\n                scope.$watch(objexpr, fnWatchNode, true);\n\n                scope.$on('$destroy', function () {\n                    scope.deleteScope(scope, scope[keyNode]);\n                });\n\n                function fnWatchNode(newVal, oldVal, scope) {\n\n                    var nodeOf = scope[keyNode],\n                        _icon;\n\n                    if (first) {\n                        _icon                 = nodeOf.__icon__;\n                        nodeOf.__icon_class__ = scope.$class.icon[_icon];\n                    } else {\n\n                        var parentReal = nodeOf.__parent_real__,\n                            parentNode = scope.tree_nodes[parentReal] || null,\n                            _childs    = nodeOf.__children__,\n                            _len       = _childs.length,\n                            _i;\n\n                        if (!nodeOf.__inited__) {\n                            nodeOf.__inited__ = true;\n                        }\n\n                        if (nodeOf.__hashKey__ !== hashKey) {\n                            // clear scope in $globals\n                            scope.deleteScope(scope, nodeOf);\n\n                            // add new scope into $globals\n                            scope.setScope(scope, nodeOf);\n                            hashKey = nodeOf.__hashKey__;\n                        }\n\n                        if (parentNode && (!parentNode.__expanded__ || !parentNode.__visible__)) {\n                            element.addClass(scope.$class.hidden);\n                            nodeOf.__visible__ = false;\n                        } else {\n                            element.removeClass(scope.$class.hidden);\n                            nodeOf.__visible__ = true;\n                        }\n\n                        if (_len === 0) {\n                            _icon = -1;\n                        } else {\n                            if (nodeOf.__expanded__) {\n                                _icon = 1;\n                            } else {\n                                _icon = 0;\n                            }\n                        }\n\n                        nodeOf.__icon__       = _icon;\n                        nodeOf.__icon_class__ = scope.$class.icon[_icon];\n\n                        if (scope.isTable) {\n                            for (_i = 0; _i < _len; _i++) {\n                                scope.for_all_descendants(_childs[_i], scope.hiddenChild, nodeOf, true);\n                            }\n                        } else {\n                            if (!childsElem) {\n                                childsElem = scope.getElementChilds();\n                            }\n\n                            if (nodeOf.__expanded__) {\n                                childsElem.removeClass(scope.$class.hidden);\n                            } else {\n                                childsElem.addClass(scope.$class.hidden);\n                            }\n                        }\n\n                    }\n\n                    first = false;\n\n                }\n            }\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .directive('treeDndNodes', function () {\n        return {\n            restrict: 'A',\n            replace:  true,\n            link:     function (scope, element/*, attrs*/) {\n                scope.$type = 'TreeDnDNodes';\n\n                if (scope.$class.nodes) {\n                    element.addClass(scope.$class.nodes);\n                    scope.$nodes_class = scope.$class.nodes;\n                } else {\n                    scope.$nodes_class = '';\n                }\n            }\n        };\n    });\n\nangular.module('ntt.TreeDnD')\n    .directive(\n        'treeDnd', fnInitTreeDnD);\n\nfnInitTreeDnD.$inject = [\n    '$timeout', '$http', '$compile', '$parse', '$window', '$document', '$templateCache',\n    '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin', '$TreeDnDViewport'\n];\n\nfunction fnInitTreeDnD($timeout, $http, $compile, $parse, $window, $document, $templateCache,\n                       $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin, $TreeDnDViewport) {\n    return {\n        restrict:   'E',\n        scope:      true,\n        replace:    true,\n        controller: ['$scope', '$element', '$attrs', fnController],\n        compile:    fnCompile\n    };\n\n    function fnController($scope, $element, $attrs) {\n        $scope.indent      = 20;\n        $scope.indent_plus = 15;\n        $scope.indent_unit = 'px';\n        $scope.$tree_class = 'table';\n        $scope.primary_key = '__uid__';\n\n        $scope.$type          = 'TreeDnD';\n        // $scope.enabledFilter = null;\n        $scope.colDefinitions = [];\n        $scope.$globals       = {};\n        $scope.$class         = {};\n\n        $scope.treeData   = [];\n        $scope.tree_nodes = [];\n\n        $scope.$class = angular.copy($TreeDnDClass);\n        angular.extend(\n            $scope.$class.icon, {\n                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\n                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\n                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\n            }\n        );\n\n        $scope.for_all_descendants = function (node, fn, parent, checkSibling) {\n            if (angular.isFunction(fn)) {\n                var _i, _len, _nodes;\n\n                if (fn(node, parent)) {\n                    // have error or need ignore children\n                    return false;\n                }\n                _nodes = node.__children__;\n                _len   = _nodes ? _nodes.length : 0;\n                for (_i = 0; _i < _len; _i++) {\n                    if (!$scope.for_all_descendants(_nodes[_i], fn, node) && !checkSibling) {\n                        // skip sibling of node checking\n                        return false;\n                    }\n                }\n            }\n            // succeed then continue\n            return true;\n        };\n\n        $scope.getLastDescendant = function (node) {\n            var last_child, n;\n            if (!node) {\n                node = $scope.tree ? $scope.tree.selected_node : false;\n            }\n            if (node === false) {\n                return false;\n            }\n            n = node.__children__.length;\n            if (n === 0) {\n                return node;\n            } else {\n                last_child = node.__children__[n - 1];\n                return $scope.getLastDescendant(last_child);\n            }\n        };\n\n        $scope.getElementChilds = function () {\n            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\n        };\n\n        $scope.onClick = function (node) {\n            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\n                // We want to detach from Angular's digest cycle so we can\n                // independently measure the time for one cycle.\n                setTimeout(\n                    function () {\n                        $scope.tree.on_click(node);\n                    }, 0\n                );\n            }\n        };\n\n        $scope.onSelect = function (node) {\n            if (angular.isDefined($scope.tree)) {\n                if (node !== $scope.tree.selected_node) {\n                    $scope.tree.select_node(node);\n                }\n\n                if (angular.isFunction($scope.tree.on_select)) {\n                    setTimeout(\n                        function () {\n                            $scope.tree.on_select(node);\n                        }, 0\n                    );\n                }\n            }\n        };\n\n        var passedExpand, _clone;\n        $scope.toggleExpand = function (node, fnCallback) {\n            passedExpand = true;\n            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\n                passedExpand = false;\n            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\n                passedExpand = false;\n            }\n\n            if (passedExpand) {\n                if (node.__children__.length > 0) {\n                    node.__expanded__ = !node.__expanded__;\n                }\n            }\n        };\n\n\n        var _fnGetHash    = function (node) {\n                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\n            },\n            _fnSetHash    = function (node) {\n                var _hashKey = _fnGetHash(node);\n                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                    node.__hashKey__ = _hashKey;\n                }\n                return node;\n            };\n        $scope.getHash    = _fnGetHash;\n        $scope.$callbacks = {\n            getHash:             _fnGetHash,\n            setHash:             _fnSetHash,\n            for_all_descendants: $scope.for_all_descendants,\n            /*expand:              function (node) {\n             return true;\n             },*/\n            accept:              function (/*dragInfo, moveTo, isChanged*/) {\n                return $scope.dropEnabled === true;\n            },\n            calsIndent:          function (level, skipUnit, skipEdge) {\n                var unit = 0,\n                    edge = skipEdge ? 0 : $scope.indent_plus;\n                if (!skipUnit) {\n                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\n                }\n\n                if (level - 1 < 1) {\n                    return edge + unit;\n                } else {\n                    return $scope.indent * (level - 1) + edge + unit;\n                }\n            },\n            droppable:           function () {\n                return $scope.dropEnabled === true;\n            },\n            draggable:           function () {\n                return $scope.dragEnabled === true;\n            },\n            beforeDrop:          function (/*event*/) {\n                return true;\n            },\n            changeKey:           function (node) {\n                var _key     = node.__uid__;\n                node.__uid__ = Math.random();\n                if (node.__selected__) {\n                    delete node.__selected__;\n                }\n\n                if ($scope.primary_key !== '__uid__') {\n                    _key = '' + node[$scope.primary_key];\n                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\n\n                    node[$scope.primary_key] = _key;\n                }\n                // delete(node.__hashKey__);\n            },\n            clone:               function (node/*, _this*/) {\n                _clone = angular.copy(node);\n                this.for_all_descendants(_clone, this.changeKey);\n                return _clone;\n            },\n            remove:              function (node, parent, _this, delayReload) {\n                var temp = parent.splice(node.__index__, 1)[0];\n                if (!delayReload) {\n                    $scope.reload_data();\n                }\n                return temp;\n            },\n            clearInfo:           function (node) {\n                delete node.__inited__;\n                delete node.__visible__;\n\n                // always changed after call reload_data\n                //delete node.__hashKey__;\n            },\n            add:                 function (node, pos, parent/*, _this*/) {\n                // clearInfo\n                this.for_all_descendants(node, this.clearInfo);\n                if (parent) {\n                    if (parent.length > -1) {\n                        if (pos > -1) {\n                            parent.splice(pos, 0, node);\n                        } else {\n                            // todo If children need load crazy\n                            parent.push(node);\n                        }\n                    } else {\n                        parent.push(node);\n                    }\n                }\n            }\n        };\n\n        $scope.deleteScope = function (scope, node) {\n            var _hash = node.__hashKey__;\n            if ($scope.$globals[_hash] && $scope.$globals[_hash] === scope) {\n                delete $scope.$globals[_hash];\n            }\n        };\n\n        $scope.setScope = function (scope, node) {\n            var _hash = node.__hashKey__;\n            if ($scope.$globals[_hash] !== scope) {\n                $scope.$globals[_hash] = scope;\n            }\n        };\n\n        $scope.getScope = function (node) {\n            if (node) {\n                var _hash = node.__hashKey__;\n                //var _hash = typeof node === 'string' ? node : node.__hashKey__;\n                return $scope.$globals[_hash];\n            }\n            return $scope;\n        };\n\n        if ($attrs.enableDrag || $attrs.enableDrop) {\n            $scope.placeElm    = null;\n            //                            $scope.dragBorder = 30;\n            $scope.dragEnabled = null;\n            $scope.dropEnabled = null;\n            $scope.horizontal  = null;\n\n            if ($attrs.enableDrag) {\n\n                $scope.dragDelay       = 0;\n                $scope.enabledMove     = true;\n                $scope.statusMove      = true;\n                $scope.enabledHotkey   = false;\n                $scope.enabledCollapse = null;\n                $scope.statusElm       = null;\n                $scope.dragging        = null;\n\n                angular.extend(\n                    $scope.$callbacks, {\n                        beforeDrag: function (/*scopeDrag*/) {\n                            return true;\n                        },\n                        dragStop:   function (info, passed) {\n                            if (!info || !info.changed && info.drag.enabledMove || !passed) {\n                                return null;\n                            }\n\n                            info.target.reload_data();\n\n                            if (info.target !== info.drag && info.drag.enabledMove) {\n                                info.drag.reload_data();\n                            }\n                        },\n                        dropped:    function (info/*, pass*/) {\n                            if (!info) {\n                                return null;\n                            }\n\n                            var _node         = info.node,\n                                _nodeAdd      = null,\n                                _move         = info.move,\n                                _parent       = null,\n                                _parentRemove = info.parent || info.drag.treeData,\n                                _parentAdd    = _move.parent || info.target.treeData,\n                                isMove        = info.drag.enabledMove;\n\n                            if (!info.changed && isMove) {\n                                return false;\n                            }\n\n                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\n                                if (isMove) {\n                                    _parent = _parentRemove;\n                                    if (angular.isDefined(_parent.__children__)) {\n                                        _parent = _parent.__children__;\n                                    }\n\n                                    _nodeAdd = info.drag.$callbacks.remove(\n                                        _node,\n                                        _parent,\n                                        info.drag.$callbacks,\n                                        true // delay reload\n                                    );\n                                } else {\n                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\n                                }\n\n                                // if node dragging change index in sample node parent\n                                // and index node decrement\n                                if (isMove &&\n                                    info.drag === info.target &&\n                                    _parentRemove === _parentAdd &&\n                                    _move.pos >= info.node.__index__) {\n                                    _move.pos--;\n                                }\n\n                                _parent = _parentAdd;\n                                if (_parent.__children__) {\n                                    _parent = _parent.__children__;\n                                }\n\n                                info.target.$callbacks.add(\n                                    _nodeAdd,\n                                    _move.pos,\n                                    _parent,\n                                    info.drag.$callbacks\n                                );\n\n                                return true;\n                            }\n\n                            return false;\n                        },\n                        dragStart:  function (event) {\n                        },\n                        dragMove:   function (event) {\n                        }\n                    }\n                );\n\n                $scope.setDragging = function (dragInfo) {\n                    $scope.dragging = dragInfo;\n                };\n\n                $scope.enableMove = function (val) {\n                    if (typeof val === 'boolean') {\n                        $scope.enabledMove = val;\n                    } else {\n                        $scope.enabledMove = true;\n                    }\n                };\n\n                if ($attrs.enableStatus) {\n                    $scope.enabledStatus = false;\n\n                    $scope.hideStatus = function () {\n                        if ($scope.statusElm) {\n                            $scope.statusElm.addClass($scope.$class.hidden);\n                        }\n                    };\n\n                    $scope.refreshStatus = function () {\n                        if (!$scope.dragging) {\n                            return;\n                        }\n\n                        if ($scope.enabledStatus) {\n                            var statusElmOld = $scope.statusElm;\n                            if ($scope.enabledMove) {\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\n                            } else {\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\n                            }\n\n                            if (statusElmOld !== $scope.statusElm) {\n                                if (statusElmOld) {\n                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\n                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\n                                    statusElmOld.remove();\n                                }\n                                $document.find('body').append($scope.statusElm);\n\n                            }\n\n                            $scope.statusElm.removeClass($scope.$class.hidden);\n                        }\n                    };\n\n                    $scope.setPositionStatus = function (e) {\n                        if ($scope.statusElm) {\n                            $scope.statusElm.css(\n                                {\n                                    'left':    e.pageX + 10 + 'px',\n                                    'top':     e.pageY + 15 + 'px',\n                                    'z-index': 9999\n                                }\n                            );\n                            $scope.statusElm.addClass($scope.$class.status);\n                        }\n                    };\n                }\n            }\n\n            $scope.targeting = false;\n\n            $scope.getPrevSibling = function (node) {\n                if (node && node.__index__ > 0) {\n                    var _parent, _index = node.__index__ - 1;\n\n                    if (angular.isDefined(node.__parent_real__)) {\n                        _parent = $scope.tree_nodes[node.__parent_real__];\n                        return _parent.__children__[_index];\n                    }\n                    return $scope.treeData[_index];\n\n                }\n                return null;\n            };\n\n            $scope.getNode = function (index) {\n                if (angular.isUndefinedOrNull(index)) {\n                    return null;\n                }\n                return $scope.tree_nodes[index];\n            };\n\n            $scope.initPlace = function (element, dragElm) {\n\n                if (!$scope.placeElm) {\n                    if ($scope.isTable) {\n                        $scope.placeElm = angular.element($window.document.createElement('tr'));\n                        var _len_down   = $scope.colDefinitions.length;\n                        $scope.placeElm.append(\n                            angular.element($window.document.createElement('td'))\n                                .addClass($scope.$class.empty)\n                                .addClass('indented')\n                                .addClass($scope.$class.place)\n                        );\n                        while (_len_down-- > 0) {\n                            $scope.placeElm.append(\n                                angular.element($window.document.createElement('td'))\n                                    .addClass($scope.$class.empty)\n                                    .addClass($scope.$class.place)\n                            );\n                        }\n                    } else {\n                        $scope.placeElm = angular.element($window.document.createElement('li'))\n                            .addClass($scope.$class.empty)\n                            .addClass($scope.$class.place);\n                    }\n\n                }\n\n                if (dragElm) {\n                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\n                }\n\n                if (element) {\n                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\n                } else {\n                    $scope.getElementChilds().append($scope.placeElm);\n                }\n\n                return $scope.placeElm;\n            };\n\n            $scope.hidePlace = function () {\n                if ($scope.placeElm) {\n                    $scope.placeElm.addClass($scope.$class.hidden);\n                }\n            };\n\n            $scope.showPlace = function () {\n                if ($scope.placeElm) {\n                    $scope.placeElm.removeClass($scope.$class.hidden);\n                }\n            };\n\n            $scope.getScopeTree = function () {\n                return $scope;\n            };\n\n        }\n\n        $scope.$safeApply = $safeApply;\n\n        $scope.hiddenChild = function fnHiddenChild(node, parent) {\n            var nodeScope = $scope.getScope(node);\n            if (nodeScope) {\n                if (parent && parent.__expanded__ && parent.__visible__) {\n                    nodeScope.$element.removeClass($scope.$class.hidden);\n                    node.__visible__ = true;\n                } else {\n                    nodeScope.$element.addClass($scope.$class.hidden);\n                    node.__visible__ = false;\n                }\n            } else {\n                // show node & init scope\n                if (parent && parent.__expanded__ && parent.__visible__) {\n                    node.__visible__ = true;\n                } else {\n                    node.__visible__ = false;\n                }\n            }\n\n            // skip all child hiding... if not expaned\n            return node.__expanded__ === false;\n        };\n\n        var _fnInitFilter,\n            _fnInitOrderBy,\n            _fnGetControl,\n            _defaultFilterOption = {\n                showParent: true,\n                showChild:  false,\n                beginAnd:   true\n            },\n            tree,\n            _watches             = [\n                [\n                    'enableDrag',\n                    [\n                        ['boolean', 'enableStatus', null, 'enabledStatus'],\n                        ['boolean', 'enableMove', null, 'enabledMove'],\n                        ['number', 'dragDelay', 0, null, 0],\n                        ['boolean', 'enableCollapse', null, 'enabledCollapse'],\n                        ['boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\n                            if (isHotkey) {\n                                $scope.enabledMove = false;\n                            } else {\n                                $scope.enabledMove = $scope.statusMove;\n                            }\n                        }]\n                    ]\n                ],\n                [\n                    ['enableDrag', 'enableStatus'], [\n                    ['string', 'templateCopy', $attrs.templateCopy, 'templateCopy', null, function (_url) {\n                        if (_url && $templateCache.get(_url)) {\n                            $TreeDnDTemplate.setCopy(_url, $scope);\n                        }\n                    }],\n                    ['string', 'templateMove', $attrs.templateMove, 'templateMove', null, function (_url) {\n                        if (_url && $templateCache.get(_url)) {\n                            $TreeDnDTemplate.setMove(_url, $scope);\n                        }\n                    }]\n                ]],\n                [\n                    [['enableDrag', 'enableDrop']], [\n                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\n                ],\n                [\n                    '*', [\n                    ['boolean', 'treeTable', true, 'treeTable', null],\n                    ['boolean', 'horizontal'],\n                    ['callback', 'treeClass', function (val) {\n                        switch (typeof val) {\n                            case 'string':\n                                $scope.$tree_class = val;\n                                break;\n                            case 'object':\n                                angular.extend($scope.$class, val);\n                                $scope.$tree_class = $scope.$class.tree;\n                                break;\n                            default:\n                                $scope.$tree_class = $attrs.treeClass;\n                                break;\n                        }\n                    }, 'treeClass', function () {\n                        $scope.$tree_class = $scope.$class.tree + ' table';\n                    }, null, function () {\n                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(' ' + $attrs.treeClass)) {\n                            $scope.$tree_class = $attrs.treeClass.trim();\n                            return true;\n                        }\n                    }],\n                    [\n                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\n                        function (expandOn) {\n                            if (angular.isUndefinedOrNull(expandOn)) {\n                                $scope.expandingProperty = $attrs.expandOn;\n                            }\n                        }],\n                    ['object', 'treeControl', angular.isDefined($scope.tree) ? $scope.tree : {},\n                     'tree', null, function ($tree) {\n\n                        if (!angular.isFunction(_fnGetControl)) {\n                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\n                        }\n\n                        if (angular.isFunction(_fnGetControl)) {\n                            tree = angular.extend(\n                                $tree,\n                                _fnGetControl($scope)\n                            );\n                        }\n                    }],\n                    [\n                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\n                        function (colDefs) {\n                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\n                                $scope.colDefinitions = getColDefs();\n                            }\n                        }],\n                    [\n                        ['object', 'string', 'array', 'function'], 'orderBy', $attrs.orderBy\n                    ],\n                    [\n                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\n                        var _passed = false;\n                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\n                            var _keysF = Object.keys(filters),\n                                _lenF  = _keysF.length, _iF;\n\n                            if (_lenF > 0) {\n                                for (_iF = 0; _iF < _lenF; _iF++) {\n\n                                    if (typeof filters[_keysF[_iF]] === 'string' &&\n                                        filters[_keysF[_iF]].length === 0) {\n                                        continue;\n                                    }\n                                    _passed = true;\n                                    break;\n                                }\n                            }\n                        }\n\n                        $scope.enabledFilter = _passed;\n                        reload_data();\n                    }],\n                    [\n                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\n                        _defaultFilterOption, function (option) {\n                        if (angular.isObject(option)) {\n                            $scope.filterOptions = angular.extend(_defaultFilterOption, option);\n                        }\n                    }],\n                    ['string', 'primaryKey', $attrs.primaryKey, 'primary_key', '__uid__'],\n                    ['string', 'indentUnit', $attrs.indentUnit, 'indent_unit'],\n                    ['number', 'indent', 30, null, 30],\n                    ['number', 'indentPlus', 20, null, 20],\n                    ['null', 'callbacks', function (optCallbacks) {\n                        angular.forEach(\n                            optCallbacks, function (value, key) {\n                                if (typeof value === 'function') {\n                                    if ($scope.$callbacks[key]) {\n                                        $scope.$callbacks[key] = value;\n                                    }\n                                }\n                            }\n                        );\n                        return $scope.$callbacks;\n                    },\n                     '$callbacks'\n                    ],\n                    ['number', 'expandLevel', 3, 'expandLevel', 3, function () {\n                        reload_data();\n                    }],\n                    ['number', 'treeLimit', 100, '$TreeLimit', 100],\n                    ['boolean', 'enableDrag', null, 'dragEnabled'],\n                    ['boolean', 'enableDrop', null, 'dropEnabled']\n                ]]\n            ],\n            w, lenW              = _watches.length,\n            i, len,\n            _curW,\n            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW,\n\n            // debounce reload_Data;\n            timeReloadData, tmpTreeData;\n\n        for (w = 0; w < lenW; w++) {\n            // skip if not exist\n            if (!check_exist_attr($attrs, _watches[w][0], true)) {\n                continue;\n            }\n            _curW = _watches[w][1];\n            for (i = 0, len = _curW.length; i < len; i++) {\n                _typeW    = _curW[i][0];\n                _nameW    = _curW[i][1];\n                _defaultW = _curW[i][2];\n                _scopeW   = _curW[i][3];\n                _NotW     = _curW[i][4];\n                _AfterW   = _curW[i][5];\n                _BeforeW  = _curW[i][6];\n                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\n            }\n        }\n\n        if ($attrs.treeData) {\n            $scope.$watch(\n                $attrs.treeData, function (val) {\n                    if (angular.equals(val, $scope.treeData)) {\n                        return;\n                    }\n\n                    tmpTreeData = val;\n                    if (angular.isUndefinedOrNull(timeReloadData)) {\n                        timeReloadData = $timeout(timeLoadData, 350);\n                    }\n                }, true\n            );\n        }\n\n        function timeLoadData() {\n            $scope.treeData = tmpTreeData;\n            reload_data();\n            timeReloadData = null;\n        }\n\n        $scope.updateLimit = function updateLimit() {\n            //console.log('Call fn UpdateLimit');\n            $scope.$TreeLimit += 50;\n        };\n\n        $scope.reload_data = reload_data;\n\n        function check_exist_attr(attrs, existAttr, isAnd) {\n            if (angular.isUndefinedOrNull(existAttr)) {\n                return false;\n            }\n\n            if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\n                return true;\n            }\n\n            if (angular.isArray(existAttr)) {\n                return for_each_attrs(attrs, existAttr, isAnd);\n            }\n        }\n\n        function for_each_attrs(attrs, exist, isAnd) {\n            var i, len = exist.length, passed = false;\n\n            if (len === 0) {\n                return null;\n            }\n            for (i = 0; i < len; i++) {\n                if (check_exist_attr(attrs, exist[i], !isAnd)) {\n                    passed = true;\n                    if (!isAnd) {\n                        return true;\n                    }\n                } else {\n                    if (isAnd) {\n                        return false;\n                    }\n                }\n            }\n\n            return passed;\n        }\n\n        function generateWatch(type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter,\n                               fnBefore) {\n            nameScope = nameScope || nameAttr;\n            if (typeof type === 'string' || angular.isArray(type)) {\n                if (angular.isFunction(fnBefore) && fnBefore()) {\n                    return;//jmp\n                }\n                if (typeof $attrs[nameAttr] === 'string') {\n                    $scope.$watch(\n                        $attrs[nameAttr], function (val) {\n                            if (typeof type === 'string' && typeof val === type ||\n                                angular.isArray(type) && type.indexOf(typeof val) > -1\n                            ) {\n                                $scope[nameScope] = val;\n                            } else {\n                                if (angular.isFunction(valDefault)) {\n                                    $scope[nameScope] = valDefault(val);\n                                } else {\n                                    $scope[nameScope] = valDefault;\n                                }\n                            }\n\n                            if (angular.isFunction(fnAfter)) {\n                                fnAfter($scope[nameScope], $scope);\n                            }\n                        }, true\n                    );\n                } else {\n\n                    if (angular.isFunction(fnNotExist)) {\n                        $scope[nameScope] = fnNotExist();\n                    } else if (!angular.isUndefined(fnNotExist)) {\n                        $scope[nameScope] = fnNotExist;\n                    }\n                }\n            }\n        }\n\n        function $safeApply(fn) {\n            var phase = this.$root.$$phase;\n            if (phase === '$apply' || phase === '$digest') {\n                if (fn && typeof fn === 'function') {\n                    fn();\n                }\n            } else {\n                this.$apply(fn);\n            }\n        }\n\n        function getExpandOn() {\n            if ($scope.treeData && $scope.treeData.length) {\n                var _firstNode = $scope.treeData[0], _keys = Object.keys(_firstNode),\n                    _regex                                 = new RegExp('^__([a-zA-Z0-9_\\-]*)__$'),\n                    _len,\n                    i;\n                // Auto get first field with type is string;\n                for (i = 0, _len = _keys.length; i < _len; i++) {\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\n                        $scope.expandingProperty = _keys[i];\n                        return;\n                    }\n                }\n\n                // Auto get first\n                if (angular.isUndefinedOrNull($scope.expandingProperty)) {\n                    $scope.expandingProperty = _keys[0];\n                }\n\n            }\n        }\n\n        function getColDefs() {\n            // Auto get Defs except attribute __level__ ....\n            if ($scope.treeData.length) {\n                var _col_defs = [], _firstNode = $scope.treeData[0],\n                    _regex                     = new RegExp('(^__([a-zA-Z0-9_\\-]*)__$|^' + $scope.expandingProperty + '$)'),\n                    _keys                      = Object.keys(_firstNode),\n                    i, _len;\n                // Auto get first field with type is string;\n                for (i = 0, _len = _keys.length; i < _len; i++) {\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\n                        _col_defs.push(\n                            {\n                                field: _keys[i]\n                            }\n                        );\n                    }\n                }\n                $scope.colDefinitions = _col_defs;\n            }\n        }\n\n        function do_f(root, node, parent, parent_real, level, visible, index) {\n\n            if (typeof node !== 'object') {\n                return 0;\n            }\n\n            var _i, _len, _icon, _index_real, _dept, _hashKey;\n            if (!angular.isArray(node.__children__)) {\n                node.__children__ = [];\n            }\n\n            node.__parent_real__ = parent_real;\n            node.__parent__      = parent;\n            _len                 = node.__children__.length;\n\n            if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\n                node.__expanded__ = level < $scope.expandLevel;\n            }\n\n            if (_len === 0) {\n                _icon = -1;\n            } else {\n                if (node.__expanded__) {\n                    _icon = 1;\n                } else {\n                    _icon = 0;\n                }\n            }\n\n            // Insert item vertically\n            _index_real         = root.length;\n            node.__index__      = index;\n            node.__index_real__ = _index_real;\n            node.__level__      = level;\n            node.__icon__       = _icon;\n            node.__icon_class__ = $scope.$class.icon[_icon];\n            node.__visible__    = !!visible;\n\n            if (angular.isUndefinedOrNull(node.__uid__)) {\n                node.__uid__ = '' + Math.random();\n            }\n\n            _hashKey = $scope.getHash(node);\n\n            if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                node.__hashKey__ = _hashKey;\n            }\n\n            root.push(node);\n\n            // Check node children\n            _dept = 1;\n            if (_len > 0) {\n                for (_i = 0; _i < _len; _i++) {\n                    _dept += do_f(\n                        root,\n                        node.__children__[_i],\n                        node[$scope.primary_key],\n                        _index_real,\n                        level + 1,\n                        visible && node.__expanded__,\n                        _i\n                    );\n                }\n            }\n\n            node.__dept__ = _dept;\n\n            return _dept;\n        }\n\n        function init_data(data) {\n\n            // clear memory\n            if (angular.isDefined($scope.tree_nodes)) {\n                delete $scope.tree_nodes;\n            }\n\n            $scope.tree_nodes = data;\n            return data;\n        }\n\n        function reload_data(oData) {\n            var _data,\n                _len,\n                _tree_nodes = [];\n            if (angular.isDefined(oData)) {\n                if (!angular.isArray(oData) || oData.length === 0) {\n                    return init_data([]);\n                } else {\n                    _data = oData;\n                }\n            } else if (!angular.isArray($scope.treeData) || $scope.treeData.length === 0) {\n                return init_data([]);\n            } else {\n                _data = $scope.treeData;\n            }\n\n            if (!$attrs.expandOn) {\n                getExpandOn();\n            }\n\n            if (!$attrs.columnDefs) {\n                getColDefs();\n            }\n\n            if (angular.isDefined($scope.orderBy)) {\n                if (!angular.isFunction(_fnInitOrderBy)) {\n                    _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\n                }\n\n                if (angular.isFunction(_fnInitOrderBy)) {\n                    _data = _fnInitOrderBy(_data, $scope.orderBy);\n                }\n            }\n\n            if (angular.isDefined($scope.filter)) {\n                if (!angular.isFunction(_fnInitFilter)) {\n                    _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\n                }\n\n                if (angular.isFunction(_fnInitFilter)) {\n                    _data = _fnInitFilter(_data, $scope.filter, $scope.filterOptions);\n                }\n            }\n\n            _len = _data.length;\n            if (_len > 0) {\n                var _i,\n                    _deptTotal = 0;\n\n                for (_i = 0; _i < _len; _i++) {\n                    _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\n                }\n\n            }\n\n            init_data(_tree_nodes);\n\n            return _tree_nodes;\n        }\n    }\n\n    function fnCompile(tElement) {\n\n        var $_Template = '',\n            _element   = tElement.html().trim();\n\n        if (_element.length > 0) {\n            $_Template = _element;\n            tElement.html('');\n        }\n\n        return function fnPost(scope, element, attrs) {\n\n            if (attrs.enableDrag) {\n                var _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\n                if (angular.isFunction(_fnInitDrag)) {\n                    _fnInitDrag(scope, element, $window, $document);\n                }\n            }\n\n            // kick out $digest\n            element.ready(function () {\n                // apply Template\n                function checkTreeTable(template, scope) {\n                    var elemNode = template[0].querySelector('[tree-dnd-node]'),\n                        attrInclude;\n\n                    scope.isTable = null;\n                    if (elemNode) {\n                        elemNode    = angular.element(elemNode);\n                        attrInclude = elemNode.attr('ng-include');\n                    } else {\n                        return;\n                    }\n\n                    if (attrInclude) {\n                        var treeInclude = $parse(attrInclude)(scope) || attrInclude;\n                        if (typeof treeInclude === 'string') {\n                            return $http.get(\n                                treeInclude,\n                                {cache: $templateCache}\n                            ).then(function (response) {\n                                    var data          = response.data || '';\n                                    data              = data.trim();\n                                    //scope.templateNode = data;\n                                    var tempDiv       = document.createElement('div');\n                                    tempDiv.innerHTML = data;\n                                    tempDiv           = angular.element(tempDiv);\n                                    scope.isTable     = !tempDiv[0].querySelector('[tree-dnd-nodes]');\n                                }\n                            );\n                        }\n                    } else {\n                        scope.isTable = !elemNode[0].querySelector('[tree-dnd-nodes]');\n                        //scope.templateNode = elemNode.html();\n                    }\n                    $TreeDnDViewport.setTemplate(scope, scope.templateNode);\n                    //elemNode.html('');\n                }\n\n                //scope.$watch(tableDataLoaded, transformTable);\n                /*\n                 function tableDataLoaded(elem) {\n                 // first cell in the tbody exists when data is loaded but doesn't have a width\n                 // until after the table is transformed\n                 var firstCell = elem.querySelector('tbody tr:first-child td:first-child');\n                 return firstCell && !firstCell.style.width;\n                 }\n\n                 function transformTable(elem, attrs) {\n                 // reset display styles so column widths are correct when measured below\n                 angular.element(elem.querySelectorAll('thead, tbody, tfoot')).css('display', '');\n\n                 // wrap in $timeout to give table a chance to finish rendering\n                 $timeout(function () {\n                 // set widths of columns\n                 angular.forEach(elem.querySelectorAll('tr:first-child th'), function (thElem, i) {\n\n                 var tdElems = elem.querySelector('tbody tr:first-child td:nth-child(' + (i + 1) + ')');\n                 var tfElems = elem.querySelector('tfoot tr:first-child td:nth-child(' + (i + 1) + ')');\n\n                 var columnWidth = tdElems ? tdElems.offsetWidth : thElem.offsetWidth;\n                 if (tdElems) {\n                 tdElems.style.width = columnWidth + 'px';\n                 }\n                 if (thElem) {\n                 thElem.style.width = columnWidth + 'px';\n                 }\n                 if (tfElems) {\n                 tfElems.style.width = columnWidth + 'px';\n                 }\n                 });\n\n                 // set css styles on thead and tbody\n                 angular.element(elem.querySelectorAll('thead, tfoot')).css('display', 'block');\n\n                 angular.element(elem.querySelectorAll('tbody')).css({\n                 'display':  'block',\n                 'height':   attrs.tableHeight || 'inherit',\n                 'overflow': 'auto'\n                 });\n\n                 // reduce width of last column by width of scrollbar\n                 var tbody          = elem.querySelector('tbody');\n                 var scrollBarWidth = tbody.offsetWidth - tbody.clientWidth;\n                 if (scrollBarWidth > 0) {\n                 // for some reason trimming the width by 2px lines everything up better\n                 scrollBarWidth -= 2;\n                 var lastColumn         = elem.querySelector('tbody tr:first-child td:last-child');\n                 lastColumn.style.width = lastColumn.offsetWidth - scrollBarWidth + 'px';\n                 }\n                 });\n                 }*/\n                var promiseCheck;\n                if ($_Template.length > 0) {\n                    promiseCheck = checkTreeTable(angular.element($_Template.trim()), scope);\n                    if (angular.isObject(promiseCheck)) {\n                        promiseCheck.then(function () {\n                            element.append($compile($_Template)(scope));\n                        });\n                    } else {\n                        element.append($compile($_Template)(scope));\n                    }\n                } else {\n                    $http.get(\n                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\n                        {cache: $templateCache}\n                    ).then(function (response) {\n                            var data     = response.data || '';\n                            data         = angular.element(data.trim());\n                            promiseCheck = checkTreeTable(data, scope);\n                            if (angular.isObject(promiseCheck)) {\n                                promiseCheck.then(function () {\n                                    element.append($compile(data)(scope));\n                                });\n                            } else {\n                                element.append($compile(data)(scope));\n                            }\n                        }\n                    );\n                }\n            })\n        };\n    }\n}\n\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDConvert', function () {\n        var _$initConvert = {\n            line2tree: function (data, primaryKey, parentKey, callback) {\n                callback = typeof callback === 'function' ? callback : function () {\n                };\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\n                    return [];\n                }\n                var tree     = [],\n                    rootIds  = [],\n                    item     = data[0],\n                    _primary = item[primaryKey],\n                    treeObjs = {},\n                    parentId, parent,\n                    len      = data.length,\n                    i        = 0;\n\n                while (i < len) {\n                    item = data[i++];\n                    callback(item);\n                    _primary           = item[primaryKey];\n                    treeObjs[_primary] = item;\n                }\n                i = 0;\n                while (i < len) {\n                    item = data[i++];\n                    callback(item);\n                    _primary           = item[primaryKey];\n                    treeObjs[_primary] = item;\n                    parentId           = item[parentKey];\n                    if (parentId) {\n                        parent = treeObjs[parentId];\n                        if (parent) {\n                            if (parent.__children__) {\n                                parent.__children__.push(item);\n                            } else {\n                                parent.__children__ = [item];\n                            }\n                        }\n                    } else {\n                        rootIds.push(_primary);\n                    }\n                }\n                len = rootIds.length;\n                for (i = 0; i < len; i++) {\n                    tree.push(treeObjs[rootIds[i]]);\n                }\n                return tree;\n            },\n            tree2tree: function access_child(data, containKey, callback) {\n                callback  = typeof callback === 'function' ? callback : function () {\n                };\n                var _tree = [],\n                    _i,\n                    _len  = data ? data.length : 0,\n                    _copy, _child;\n                for (_i = 0; _i < _len; _i++) {\n                    _copy = angular.copy(data[_i]);\n                    callback(_copy);\n                    if (angular.isArray(_copy[containKey]) && _copy[containKey].length > 0) {\n                        _child = access_child(_copy[containKey], containKey, callback);\n                        delete _copy[containKey];\n                        _copy.__children__ = _child;\n                    }\n                    _tree.push(_copy);\n                }\n                return _tree;\n            }\n        };\n\n        return _$initConvert;\n    });\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDHelper', [\n        '$document', '$window',\n        function ($document, $window) {\n            var _$helper = {\n                nodrag:          function (targetElm) {\n                    return typeof targetElm.attr('data-nodrag') !== 'undefined';\n                },\n                eventObj:        function (e) {\n                    var obj = e;\n                    if (e.targetTouches !== undefined) {\n                        obj = e.targetTouches.item(0);\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\n                        obj = e.originalEvent.targetTouches.item(0);\n                    }\n                    return obj;\n                },\n                dragInfo:        function (scope) {\n                    var _node   = scope.getData(),\n                        _tree   = scope.getScopeTree(),\n                        _parent = scope.getNode(_node.__parent_real__);\n\n                    return {\n                        node:    _node,\n                        parent:  _parent,\n                        move:    {\n                            parent: _parent,\n                            pos:    _node.__index__\n                        },\n                        scope:   scope,\n                        target:  _tree,\n                        drag:    _tree,\n                        drop:    scope.getPrevSibling(_node),\n                        changed: false\n                    };\n                },\n                height:          function (element) {\n                    return element.prop('scrollHeight');\n                },\n                width:           function (element) {\n                    return element.prop('scrollWidth');\n                },\n                offset:          function (element) {\n                    var boundingClientRect = element[0].getBoundingClientRect();\n                    return {\n                        width:  element.prop('offsetWidth'),\n                        height: element.prop('offsetHeight'),\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\n                    };\n                },\n                positionStarted: function (e, target) {\n                    return {\n                        offsetX:  e.pageX - this.offset(target).left,\n                        offsetY:  e.pageY - this.offset(target).top,\n                        startX:   e.pageX,\n                        lastX:    e.pageX,\n                        startY:   e.pageY,\n                        lastY:    e.pageY,\n                        nowX:     0,\n                        nowY:     0,\n                        distX:    0,\n                        distY:    0,\n                        dirAx:    0,\n                        dirX:     0,\n                        dirY:     0,\n                        lastDirX: 0,\n                        lastDirY: 0,\n                        distAxX:  0,\n                        distAxY:  0\n                    };\n                },\n                positionMoved:   function (e, pos, firstMoving) {\n                    // mouse position last events\n                    pos.lastX = pos.nowX;\n                    pos.lastY = pos.nowY;\n\n                    // mouse position this events\n                    pos.nowX = e.pageX;\n                    pos.nowY = e.pageY;\n\n                    // distance mouse moved between events\n                    pos.distX = pos.nowX - pos.lastX;\n                    pos.distY = pos.nowY - pos.lastY;\n\n                    // direction mouse was moving\n                    pos.lastDirX = pos.dirX;\n                    pos.lastDirY = pos.dirY;\n\n                    // direction mouse is now moving (on both axis)\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\n\n                    // axis mouse is now moving on\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\n\n                    // do nothing on first move\n                    if (firstMoving) {\n                        pos.dirAx  = newAx;\n                        pos.moving = true;\n                        return;\n                    }\n\n                    // calc distance moved on this axis (and direction)\n                    if (pos.dirAx !== newAx) {\n                        pos.distAxX = 0;\n                        pos.distAxY = 0;\n                    } else {\n                        pos.distAxX += Math.abs(pos.distX);\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\n                            pos.distAxX = 0;\n                        }\n                        pos.distAxY += Math.abs(pos.distY);\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\n                            pos.distAxY = 0;\n                        }\n                    }\n                    pos.dirAx = newAx;\n                },\n                replaceIndent:   function (scope, element, indent, attr) {\n                    attr = attr || 'left';\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\n                }\n            };\n\n            return _$helper;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDPlugin', [\n        '$injector',\n        function ($injector) {\n            var _fnget = function (name) {\n                if (angular.isDefined($injector) && $injector.has(name)) {\n                    return $injector.get(name);\n                }\n                return null;\n            };\n            return _fnget;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDTemplate', [\n        '$templateCache',\n        function ($templateCache) {\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\n                copyPath     = 'template/TreeDnD/TreeDnDStatusCopy.html',\n                movePath     = 'template/TreeDnD/TreeDnDStatusMove.html',\n                scopes       = {},\n                temp,\n                _$init       = {\n                    setMove: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].movePath = path;\n                    },\n                    setCopy: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].copyPath = path;\n                    },\n                    getPath: function () {\n                        return templatePath;\n                    },\n                    getCopy: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n                        return $templateCache.get(copyPath);\n                    },\n                    getMove: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n                        return $templateCache.get(movePath);\n                    }\n                };\n\n            return _$init;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDViewport', fnInitTreeDnDViewport);\n\nfnInitTreeDnDViewport.$inject = ['$window', '$document', '$timeout', '$q', '$compile'];\n\nfunction fnInitTreeDnDViewport($window, $document, $timeout, $q, $compile) {\n\n    var viewport      = null,\n        isUpdating    = false,\n        isRender      = false,\n        updateAgain   = false,\n        viewportRect,\n        items         = [],\n        nodeTemplate,\n        updateTimeout,\n        renderTime,\n        $initViewport = {\n            setViewport:   setViewport,\n            getViewport:   getViewport,\n            add:           add,\n            setTemplate:   setTemplate,\n            getItems:      getItems,\n            updateDelayed: updateDelayed\n        },\n        eWindow       = angular.element($window);\n\n    eWindow.on('load resize scroll', updateDelayed);\n\n    return $initViewport;\n\n    function update() {\n\n        viewportRect = {\n            width:  eWindow.prop('offsetWidth') || document.documentElement.clientWidth,\n            height: eWindow.prop('offsetHeight') || document.documentElement.clientHeight,\n            top:    $document[0].body.scrollTop || $document[0].documentElement.scrollTop,\n            left:   $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft\n        };\n\n        if (isUpdating || isRender) {\n            updateAgain = true;\n            return;\n        }\n        isUpdating = true;\n\n        recursivePromise();\n    }\n\n    function recursivePromise() {\n        if (isRender) {\n            return;\n        }\n\n        var number = number > 0 ? number : items.length, item;\n\n        if (number > 0) {\n            item = items[0];\n\n            isRender   = true;\n            renderTime = $timeout(function () {\n                //item.element.html(nodeTemplate);\n                //$compile(item.element.contents())(item.scope);\n\n                items.splice(0, 1);\n                isRender = false;\n                number--;\n                $timeout.cancel(renderTime);\n                recursivePromise();\n            }, 0);\n\n        } else {\n            isUpdating = false;\n            if (updateAgain) {\n                updateAgain = false;\n                update();\n            }\n        }\n\n    }\n\n    /**\n     * Check if a point is inside specified bounds\n     * @param x\n     * @param y\n     * @param bounds\n     * @returns {boolean}\n     */\n    function pointIsInsideBounds(x, y, bounds) {\n        return x >= bounds.left &&\n            y >= bounds.top &&\n            x <= bounds.left + bounds.width &&\n            y <= bounds.top + bounds.height;\n    }\n\n    /**\n     * @name setViewport\n     * @desciption Set the viewport element\n     * @param element\n     */\n    function setViewport(element) {\n        viewport = element;\n    }\n\n    /**\n     * Return the current viewport\n     * @returns {*}\n     */\n    function getViewport() {\n        return viewport;\n    }\n\n    /**\n     * trigger an update\n     */\n    function updateDelayed() {\n        $timeout.cancel(updateTimeout);\n        updateTimeout = $timeout(function () {\n            update();\n        }, 0);\n    }\n\n    /**\n     * Add listener for event\n     * @param element\n     * @param callback\n     */\n    function add(scope, element) {\n        updateDelayed();\n        items.push({\n            element: element,\n            scope:   scope\n        });\n    }\n\n    function setTemplate(scope, template) {\n        nodeTemplate = template;\n    }\n\n    /**\n     * Get list of items\n     * @returns {Array}\n     */\n    function getItems() {\n        return items;\n    }\n}\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDFilter', [\n        '$filter', function ($filter) {\n            return fnInitFilter;\n\n            function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\n                if (!angular.isFunction(fnBefore)) {\n                    return null;\n                }\n\n                var _i, _len, _nodes,\n                    _nodePassed   = fnBefore(options, node),\n                    _childPassed  = false,\n                    _filter_index = options.filter_index;\n\n                if (angular.isDefined(node[fieldChild])) {\n                    _nodes = node[fieldChild];\n                    _len   = _nodes.length;\n\n                    options.filter_index = 0;\n                    for (_i = 0; _i < _len; _i++) {\n                        _childPassed = for_all_descendants(\n                            options,\n                            _nodes[_i],\n                            fieldChild,\n                            fnBefore,\n                            fnAfter,\n                            _nodePassed || parentPassed\n                        ) || _childPassed;\n                    }\n\n                    // restore filter_index of node\n                    options.filter_index = _filter_index;\n                }\n\n                if (angular.isFunction(fnAfter)) {\n                    fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\n                }\n\n                return _nodePassed || _childPassed;\n            }\n\n            /**\n             * Check data with callback\n             * @param {string|object|function|regex} callback\n             * @param {*} data\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnCheck(callback, data) {\n                if (angular.isUndefinedOrNull(data) || angular.isArray(data)) {\n                    return null;\n                }\n\n                if (angular.isFunction(callback)) {\n                    return callback(data, $filter);\n                } else {\n                    if (typeof callback === 'boolean') {\n                        data = !!data;\n                        return data === callback;\n                    } else if (angular.isDefined(callback)) {\n                        try {\n                            var _regex = new RegExp(callback);\n                            return _regex.test(data);\n                        }\n                        catch (err) {\n                            if (typeof data === 'string') {\n                                return data.indexOf(callback) > -1;\n                            } else {\n                                return null;\n                            }\n                        }\n                    } else {\n                        return null;\n                    }\n                }\n            }\n\n            /**\n             * `fnProcess` to call `_fnCheck`. If `condition` is `array` then call `for_each_filter`\n             * else will call `_fnCheck`. Specical `condition.field` is `_$` then apply `condition.callback` for all field, if have `field` invaild then `return true`.\n             *\n             * @param node\n             * @param condition\n             * @param isAnd\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnProccess(node, condition, isAnd) {\n                if (angular.isArray(condition)) {\n                    return for_each_filter(node, condition, isAnd);\n                } else {\n                    var _key      = condition.field,\n                        _callback = condition.callback,\n                        _iO, _keysO, _lenO;\n\n                    if (_key === '_$') {\n                        _keysO = Object.keys(node);\n                        _lenO  = _keysO.length;\n                        for (_iO = 0; _iO < _lenO; _iO++) {\n                            if (_fnCheck(_callback, node[_keysO[_iO]])) {\n                                return true;\n                            }\n                        }\n                    } else if (angular.isDefined(node[_key])) {\n                        return _fnCheck(_callback, node[_key]);\n                    }\n                }\n                return null;\n            }\n\n            /**\n             *\n             * @param {object} node\n             * @param {array} conditions Array `conditions`\n             * @param {boolean} isAnd check with condition `And`, if `And` then `return false` when all `false`\n             * @returns {null|boolean}\n             */\n            function for_each_filter(node, conditions, isAnd) {\n                var i, len = conditions.length || 0, passed = false;\n                if (len === 0) {\n                    return null;\n                }\n\n                for (i = 0; i < len; i++) {\n                    if (_fnProccess(node, conditions[i], !isAnd)) {\n                        passed = true;\n                        // if condition `or` then return;\n                        if (!isAnd) {\n                            return true;\n                        }\n                    } else {\n\n                        // if condition `and` and result in fnProccess = false then return;\n                        if (isAnd) {\n                            return false;\n                        }\n                    }\n                }\n\n                return passed;\n            }\n\n            /**\n             * Will call _fnAfter to clear data no need\n             * @param {object} options\n             * @param {object} node\n             * @param {boolean} isNodePassed\n             * @param {boolean} isChildPassed\n             * @param {boolean} isParentPassed\n             * @private\n             */\n            function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\n                if (isNodePassed === true) {\n                    node.__filtered__         = true;\n                    node.__filtered_visible__ = true;\n                    node.__filtered_index__   = options.filter_index++;\n                    return; //jmp\n                } else if (isChildPassed === true && options.showParent === true\n                    || isParentPassed === true && options.showChild === true) {\n                    node.__filtered__         = false;\n                    node.__filtered_visible__ = true;\n                    node.__filtered_index__   = options.filter_index++;\n                    return; //jmp\n                }\n\n                // remove attr __filtered__\n                delete node.__filtered__;\n                delete node.__filtered_visible__;\n                delete node.__filtered_index__;\n            }\n\n            /**\n             * `fnBefore` will called when `for_all_descendants` of `node` checking.\n             * If `filter` empty then return `true` else result of function `_fnProccess` {@see _fnProccess}\n             *\n             * @param {object} options\n             * @param {object} node\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnBefore(options, node) {\n                if (options.filter.length === 0) {\n                    return true;\n                } else {\n                    return _fnProccess(node, options.filter, options.beginAnd || false);\n                }\n            }\n\n            /**\n             * `fnBeforeClear` will called when `for_all_descendants` of `node` checking.\n             * Alway false to Clear Filter empty\n             *\n             * @param {object} options\n             * @param {object} node\n             * @returns {null|boolean}\n             * @private\n             */\n            function _fnBeforeClear(options, node) {\n                return false;\n            }\n\n            /**\n             * `_fnConvert` to convert `filter` `object` to `array` invaild.\n             *\n             * @param {object|array} filters\n             * @returns {array} Instead of `filter` or new array invaild *(converted from filter)*\n             * @private\n             */\n            function _fnConvert(filters) {\n                var _iF, _lenF, _keysF,\n                    _filter,\n                    _state;\n                // convert filter object to array filter\n                if (angular.isObject(filters) && !angular.isArray(filters)) {\n                    _keysF  = Object.keys(filters);\n                    _lenF   = _keysF.length;\n                    _filter = [];\n\n                    if (_lenF > 0) {\n                        for (_iF = 0; _iF < _lenF; _iF++) {\n\n                            if (typeof filters[_keysF[_iF]] === 'string' && filters[_keysF[_iF]].length === 0) {\n                                continue;\n                            } else if (angular.isArray(filters[_keysF[_iF]])) {\n                                _state = filters[_keysF[_iF]];\n                            } else if (angular.isObject(filters[_keysF[_iF]])) {\n                                _state = _fnConvert(filters[_keysF[_iF]]);\n                            } else {\n                                _state = {\n                                    field:    _keysF[_iF],\n                                    callback: filters[_keysF[_iF]]\n                                };\n                            }\n                            _filter.push(_state);\n                        }\n                    }\n                    _state = null;\n                    return _filter;\n                }\n                else {\n                    return filters;\n                }\n            }\n\n            /**\n             * `fnInitFilter` function is constructor of service `$TreeDnDFilter`.\n             * @constructor\n             * @param {object|array} treeData\n             * @param {object|array} filters\n             * @param {object} options\n             * @param {string} keyChild\n             * @returns {array} Return `treeData` or `treeData` with `filter`\n             * @private\n             */\n            function fnInitFilter(treeData, filters, options, keyChild) {\n                if (!angular.isArray(treeData)\n                    || treeData.length === 0) {\n                    return treeData;\n                }\n\n                var _i, _len,\n                    _filter;\n\n                _filter = _fnConvert(filters);\n                if (!(angular.isArray(_filter) || angular.isObject(_filter))\n                    || _filter.length === 0) {\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        for_all_descendants(\n                            options,\n                            treeData[_i],\n                            keyChild || '__children__',\n                            _fnBeforeClear, _fnAfter\n                        );\n                    }\n                    return treeData;\n                }\n\n                options.filter       = _filter;\n                options.filter_index = 0;\n                for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                    for_all_descendants(\n                        options,\n                        treeData[_i],\n                        keyChild || '__children__',\n                        _fnBefore, _fnAfter\n                    );\n                }\n\n                return treeData;\n            }\n\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDOrderBy', [\n        '$filter',\n        function ($filter) {\n            var _fnOrderBy          = $filter('orderBy'),\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\n                    var _i, _len, _nodes;\n\n                    if (angular.isDefined(node[name])) {\n                        _nodes = node[name];\n                        _len   = _nodes.length;\n                        // OrderBy children\n                        for (_i = 0; _i < _len; _i++) {\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\n                        }\n\n                        node[name] = fnOrderBy(node[name], options);\n                    }\n                    return node;\n                },\n                _fnOrder            = function _fnOrder(list, orderBy) {\n                    return _fnOrderBy(list, orderBy);\n                },\n                _fnMain             = function _fnMain(treeData, orderBy) {\n                    if (!angular.isArray(treeData)\n                        || treeData.length === 0\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\n                        || orderBy.length === 0 && !angular.isFunction(orderBy)) {\n                        return treeData;\n                    }\n\n                    var _i, _len;\n\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        treeData[_i] = for_all_descendants(\n                            orderBy,\n                            treeData[_i],\n                            '__children__',\n                            _fnOrder\n                        );\n                    }\n\n                    return _fnOrder(treeData, orderBy);\n                };\n\n            return _fnMain;\n        }]\n    );\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDDrag', [\n        '$timeout', '$TreeDnDHelper',\n        function ($timeout, $TreeDnDHelper) {\n            function _fnPlaceHolder(e, $params) {\n                if ($params.placeElm) {\n                    var _offset = $TreeDnDHelper.offset($params.placeElm);\n                    if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\n                        _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\n                    ) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            function _fnDragStart(e, $params) {\n                if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\n                    // disable right click\n                    return;\n                }\n\n                if (e.uiTreeDragging || e.originalEvent && e.originalEvent.uiTreeDragging) { // event has already fired in other scope.\n                    return;\n                }\n\n                // the element which is clicked.\n                var eventElm   = angular.element(e.target),\n                    eventScope = eventElm.scope();\n                if (!eventScope || !eventScope.$type) {\n                    return;\n                }\n                // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\n                //     return;\n                // }\n\n                if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\n                    return;\n                }\n\n                var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\n                    dragScope,\n                    _$scope         = $params.$scope;\n                if (eventElmTagName === 'input'\n                    || eventElmTagName === 'textarea'\n                    || eventElmTagName === 'button'\n                    || eventElmTagName === 'select') { // if it's a input or button, ignore it\n                    return;\n                }\n                // check if it or it's parents has a 'data-nodrag' attribute\n                while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\n                    if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\n                        return;\n                    }\n                    eventElm = eventElm.parent();\n                }\n\n                e.uiTreeDragging = true; // stop event bubbling\n                if (e.originalEvent) {\n                    e.originalEvent.uiTreeDragging = true;\n                }\n                e.preventDefault();\n\n                dragScope = eventScope.getScopeNode();\n\n                $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\n\n                if (!_$scope.$callbacks.beforeDrag(dragScope, $params.dragInfo)) {\n                    return;\n                }\n\n                $params.firstMoving = true;\n                _$scope.setDragging($params.dragInfo);\n\n                var eventObj = $TreeDnDHelper.eventObj(e);\n                $params.pos  = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\n\n                if (dragScope.isTable) {\n                    $params.dragElm = angular.element($params.$window.document.createElement('table'))\n                        .addClass(_$scope.$class.tree)\n                        .addClass(_$scope.$class.drag)\n                        .addClass(_$scope.$tree_class);\n                } else {\n                    $params.dragElm = angular.element($params.$window.document.createElement('ul'))\n                        .addClass(_$scope.$class.drag)\n                        .addClass('tree-dnd-nodes')\n                        .addClass(_$scope.$tree_class);\n                }\n\n                $params.dragElm.css(\n                    {\n                        'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\n                        'z-index': 9995\n                    }\n                );\n\n                $params.offsetEdge = 0;\n                var _width         = $TreeDnDHelper.width(dragScope.$element),\n                    _scope         = dragScope,\n                    _element       = _scope.$element,\n                    _clone,\n                    _needCollapse  = !!_$scope.enabledCollapse,\n                    _copied        = false,\n                    _tbody,\n                    _frag;\n\n                if (_scope.isTable) {\n                    $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\n                    _tbody             = angular.element(document.createElement('tbody'));\n                    _frag              = angular.element(document.createDocumentFragment());\n\n                    _$scope.for_all_descendants(\n                        $params.dragInfo.node, function (_node, _parent) {\n                            _scope   = _$scope.getScope(_node);\n                            _element = _scope && _scope.$element;\n                            if (_scope && _element) {\n                                if (!_copied) {\n                                    _clone = _element.clone();\n\n                                    $TreeDnDHelper.replaceIndent(\n                                        _$scope,\n                                        _clone,\n                                        _node.__level__ - $params.offsetEdge,\n                                        'padding-left'\n                                    );\n\n                                    _frag.append(_clone);\n\n                                    // skip all, just clone parent\n                                    if (_needCollapse) {\n                                        _copied = true;\n                                    }\n\n                                    // hide if have status Move;\n                                    if (_$scope.enabledMove && _$scope.$class.hidden &&\n                                        (!_parent || _node.__visible__ || _parent.__visible__ && _parent.__expanded__)) {\n                                        _element.addClass(_$scope.$class.hidden);\n                                    }\n                                }\n                            }\n                            // skip children of node not expand.\n                            return _copied || _node.__visible__ === false || _node.__expanded__ === false;\n\n                        }, null, !_needCollapse\n                    );\n                    _tbody.append(_frag);\n                    $params.dragElm.append(_tbody);\n                } else {\n\n                    _clone = _element.clone();\n                    if (_needCollapse) {\n                        _clone[0].querySelector('[tree-dnd-nodes]').remove();\n                    }\n\n                    // hide if have status Move;\n                    $params.dragElm.append(_clone);\n                    if (_$scope.enabledMove && _$scope.$class.hidden) {\n                        _element.addClass(_$scope.$class.hidden);\n                    }\n                }\n\n                $params.dragElm.css(\n                    {\n                        'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\n                            $params.offsetEdge + 1,\n                            true,\n                            true\n                        ) + 'px',\n                        'top':  eventObj.pageY - $params.pos.offsetY + 'px'\n                    }\n                );\n                // moving item with descendant\n                $params.$document.find('body').append($params.dragElm);\n                if (_$scope.$callbacks.droppable()) {\n                    $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\n\n                    if (dragScope.isTable) {\n                        $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\n                    }\n\n                    $params.placeElm.css('width', _width);\n                }\n\n                _$scope.showPlace();\n                _$scope.targeting = true;\n\n                if (_$scope.enabledStatus) {\n                    _$scope.refreshStatus();\n                    _$scope.setPositionStatus(e);\n                }\n\n                angular.element($params.$document).bind('touchend', $params.dragEndEvent);\n                angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\n                angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\n                angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\n                angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\n                angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\n\n                $params.document_height = Math.max(\n                    $params.body.scrollHeight,\n                    $params.body.offsetHeight,\n                    $params.html.clientHeight,\n                    $params.html.scrollHeight,\n                    $params.html.offsetHeight\n                );\n\n                $params.document_width = Math.max(\n                    $params.body.scrollWidth,\n                    $params.body.offsetWidth,\n                    $params.html.clientWidth,\n                    $params.html.scrollWidth,\n                    $params.html.offsetWidth\n                );\n            }\n\n            function _fnDragMove(e, $params) {\n                var _$scope = $params.$scope;\n                if (!$params.dragStarted) {\n                    if (!$params.dragDelaying) {\n                        $params.dragStarted = true;\n                        _$scope.$safeApply(\n                            function () {\n                                _$scope.$callbacks.dragStart($params.dragInfo);\n                            }\n                        );\n                    }\n                    return;\n                }\n\n                if ($params.dragElm) {\n                    e.preventDefault();\n                    if ($params.$window.getSelection) {\n                        $params.$window.getSelection().removeAllRanges();\n                    } else if ($params.$window.document.selection) {\n                        $params.$window.document.selection.empty();\n                    }\n\n                    var eventObj   = $TreeDnDHelper.eventObj(e),\n                        leftElmPos = eventObj.pageX - $params.pos.offsetX,\n                        topElmPos  = eventObj.pageY - $params.pos.offsetY;\n\n                    //dragElm can't leave the screen on the left\n                    if (leftElmPos < 0) {\n                        leftElmPos = 0;\n                    }\n\n                    //dragElm can't leave the screen on the top\n                    if (topElmPos < 0) {\n                        topElmPos = 0;\n                    }\n\n                    //dragElm can't leave the screen on the bottom\n                    if (topElmPos + 10 > $params.document_height) {\n                        topElmPos = $params.document_height - 10;\n                    }\n\n                    //dragElm can't leave the screen on the right\n                    if (leftElmPos + 10 > $params.document_width) {\n                        leftElmPos = $params.document_width - 10;\n                    }\n\n                    $params.dragElm.css(\n                        {\n                            'left': leftElmPos + _$scope.$callbacks.calsIndent(\n                                $params.offsetEdge + 1,\n                                true,\n                                true\n                            ) + 'px',\n                            'top':  topElmPos + 'px'\n                        }\n                    );\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.setPositionStatus(e);\n                    }\n\n                    var top_scroll    = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\n                        bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\n                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\n                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\n                        window.scrollBy(0, 10);\n                    }\n                    // to scroll top if cursor y-position is less than the top position the vertical scroll\n                    if (top_scroll > eventObj.pageY) {\n                        window.scrollBy(0, -10);\n                    }\n\n                    $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\n\n                    if ($params.firstMoving) {\n                        $params.firstMoving = false;\n                        return;\n                    }\n                    // check if add it as a child node first\n\n                    var targetX    = eventObj.pageX - $params.$window.document.body.scrollLeft,\n                        targetY    = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\n\n                        targetElm,\n                        targetScope,\n                        targetBefore,\n                        targetOffset,\n                        isChanged  = true,\n                        isVeritcal = true,\n                        isEmpty,\n                        isSwapped,\n                        _scope,\n                        _target,\n                        _parent,\n                        _info      = $params.dragInfo,\n                        _move      = _info.move,\n                        _drag      = _info.node,\n                        _drop      = _info.drop,\n                        treeScope  = _info.target,\n                        fnSwapTree,\n                        isHolder   = _fnPlaceHolder(e, $params);\n\n                    if (!isHolder) {\n                        /* when using elementFromPoint() inside an iframe, you have to call\n                         elementFromPoint() twice to make sure IE8 returns the correct value\n                         $params.$window.document.elementFromPoint(targetX, targetY);*/\n\n                        targetElm = angular.element(\n                            $params.$window.document.elementFromPoint(\n                                targetX,\n                                targetY\n                            )\n                        );\n\n                        targetScope = targetElm.scope();\n                        if (!targetScope || !targetScope.$callbacks || !targetScope.$callbacks.droppable()) {\n                            // Not allowed Drop Item\n                            return;\n                        }\n\n                        fnSwapTree = function () {\n                            treeScope = targetScope.getScopeTree();\n                            _target   = _info.target;\n\n                            if (_info.target !== treeScope) {\n                                // Replace by place-holder new\n                                _target.hidePlace();\n                                _target.targeting   = false;\n                                treeScope.targeting = true;\n\n                                _info.target     = treeScope;\n                                $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\n\n                                _target   = null;\n                                isSwapped = true;\n                            }\n                            return true;\n                        };\n\n                        if (angular.isFunction(targetScope.getScopeNode)) {\n                            targetScope = targetScope.getScopeNode();\n                            if (!fnSwapTree()) {\n                                return;\n                            }\n                        } else {\n                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\n                                if (targetScope.tree_nodes) {\n                                    if (targetScope.tree_nodes.length === 0) {\n                                        if (!fnSwapTree()) {\n                                            return;\n                                        }\n                                        // Empty\n                                        isEmpty = true;\n                                    }\n                                } else {\n                                    return;\n                                }\n                            } else {\n                                return;\n                            }\n                        }\n                    }\n\n                    if ($params.pos.dirAx && !isSwapped || isHolder) {\n                        isVeritcal  = false;\n                        targetScope = _info.scope;\n                    }\n\n                    if (!targetScope.$element && !targetScope) {\n                        return;\n                    }\n\n                    if (isEmpty) {\n                        _move.parent = null;\n                        _move.pos    = 0;\n\n                        _drop = null;\n                    } else {\n                        // move vertical\n                        if (isVeritcal) {\n                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\n                            if (angular.isUndefinedOrNull(targetElm)) {\n                                return;\n                            }\n                            targetOffset = $TreeDnDHelper.offset(targetElm);\n\n                            if (targetScope.horizontal && !targetScope.isTable) {\n                                targetBefore = eventObj.pageX < targetOffset.left + $TreeDnDHelper.width(targetElm) / 2;\n                            } else {\n                                if (targetScope.isTable) {\n                                    targetBefore = eventObj.pageY < targetOffset.top + $TreeDnDHelper.height(targetElm) / 2;\n                                } else {\n                                    var _height = $TreeDnDHelper.height(targetElm);\n\n                                    if (targetScope.getElementChilds()) {\n                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\n                                    }\n\n                                    if (eventObj.pageY > targetOffset.top + _height) {\n                                        return;\n                                    }\n\n                                    targetBefore = eventObj.pageY < targetOffset.top + _height / 2;\n                                }\n                            }\n\n                            if (!angular.isFunction(targetScope.getData)) {\n                                return;\n                            }\n\n                            _target = targetScope.getData();\n                            _parent = targetScope.getNode(_target.__parent_real__);\n\n                            if (targetBefore) {\n                                var _prev = targetScope.getPrevSibling(_target);\n\n                                _move.parent = _parent;\n                                _move.pos    = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\n\n                                _drop = _prev;\n                            } else {\n                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\n                                    _move.parent = _target;\n                                    _move.pos    = 0;\n\n                                    _drop = null;\n                                } else {\n                                    _move.parent = _parent;\n                                    _move.pos    = _target.__index__ + 1;\n\n                                    _drop = _target;\n                                }\n                            }\n                        } else {\n                            // move horizontal\n                            if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\n                                $params.pos.distAxX = 0;\n                                // increase horizontal level if previous sibling exists and is not collapsed\n                                if ($params.pos.distX > 0) {\n                                    _parent = _drop;\n                                    if (!_parent) {\n                                        if (_move.pos - 1 >= 0) {\n                                            _parent = _move.parent.__children__[_move.pos - 1];\n                                        } else {\n                                            return;\n                                        }\n                                    }\n\n                                    if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\n                                        _parent = treeScope.getPrevSibling(_parent);\n                                    }\n\n                                    if (_parent && _parent.__visible__) {\n                                        var _len = _parent.__children__.length;\n\n                                        _move.parent = _parent;\n                                        _move.pos    = _len;\n\n                                        if (_len > 0) {\n                                            _drop = _parent.__children__[_len - 1];\n                                        } else {\n                                            _drop = null;\n                                        }\n                                    } else {\n                                        // Not changed\n                                        return;\n                                    }\n                                } else if ($params.pos.distX < 0) {\n                                    _target = _move.parent;\n                                    if (_target &&\n                                        (_target.__children__.length === 0 ||\n                                            _target.__children__.length - 1 < _move.pos ||\n                                            _info.drag === _info.target &&\n                                            _target.__index_real__ === _drag.__parent_real__ &&\n                                            _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove)\n                                    ) {\n                                        _parent = treeScope.getNode(_target.__parent_real__);\n\n                                        _move.parent = _parent;\n                                        _move.pos    = _target.__index__ + 1;\n\n                                        _drop = _target;\n                                    } else {\n                                        // Not changed\n                                        return;\n                                    }\n                                } else {\n                                    return;\n                                }\n                            } else {\n                                // limited\n                                return;\n                            }\n                        }\n                    }\n\n                    if (_info.drag === _info.target &&\n                        _move.parent &&\n                        _drag.__parent_real__ === _move.parent.__index_real__ &&\n                        _drag.__index__ === _move.pos\n                    ) {\n                        isChanged = false;\n                    }\n\n                    if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\n                        _info.move    = _move;\n                        _info.drop    = _drop;\n                        _info.changed = isChanged;\n                        _info.scope   = targetScope;\n\n                        if (targetScope.isTable) {\n                            $TreeDnDHelper.replaceIndent(\n                                treeScope,\n                                $params.placeElm,\n                                angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\n                            );\n\n                            if (_drop) {\n                                _parent = (_move.parent ? _move.parent.__children__ : null) || _info.target.treeData;\n\n                                if (_drop.__index__ < _parent.length - 1) {\n                                    // Find fast\n                                    _drop  = _parent[_drop.__index__ + 1];\n                                    _scope = _info.target.getScope(_drop);\n                                    _scope.$element[0].parentNode.insertBefore(\n                                        $params.placeElm[0],\n                                        _scope.$element[0]\n                                    );\n                                } else {\n                                    _target = _info.target.getLastDescendant(_drop);\n                                    _scope  = _info.target.getScope(_target);\n                                    _scope.$element.after($params.placeElm);\n                                }\n                            } else {\n                                _scope = _info.target.getScope(_move.parent);\n                                if (_scope) {\n                                    if (_move.parent) {\n                                        _scope.$element.after($params.placeElm);\n\n                                    } else {\n                                        _scope.getElementChilds().prepend($params.placeElm);\n                                    }\n                                }\n                            }\n                        } else {\n                            _scope = _info.target.getScope(_drop || _move.parent);\n                            if (_drop) {\n                                _scope.$element.after($params.placeElm);\n                            } else {\n                                _scope.getElementChilds().prepend($params.placeElm);\n                            }\n                        }\n\n                        treeScope.showPlace();\n\n                        _$scope.$safeApply(\n                            function () {\n                                _$scope.$callbacks.dragMove(_info);\n                            }\n                        );\n                    }\n\n                }\n            }\n\n            function _fnDragEnd(e, $params) {\n                e.preventDefault();\n                if ($params.dragElm) {\n                    var _passed  = false,\n                        _$scope  = $params.$scope,\n                        _scope   = _$scope.getScope($params.dragInfo.node),\n                        _element = _scope.$element;\n\n                    _$scope.$safeApply(\n                        function () {\n                            _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\n                        }\n                    );\n\n                    // rollback all\n                    if (_scope.isTable) {\n                        _$scope.for_all_descendants(\n                            $params.dragInfo.node, function (_node, _parent) {\n                                _scope   = _$scope.getScope(_node);\n                                _element = _scope && _scope.$element;\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                                return _node.__visible__ === false || _node.__expanded__ === false\n                            }, null, true\n                        );\n                    } else {\n                        if (_$scope.$class.hidden) {\n                            _element.removeClass(_$scope.$class.hidden);\n                        }\n                    }\n\n                    $params.dragElm.remove();\n                    $params.dragElm = null;\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.hideStatus();\n                    }\n\n                    if (_$scope.$$apply) {\n                        _$scope.$safeApply(\n                            function () {\n                                var _status = _$scope.$callbacks.dropped(\n                                    $params.dragInfo,\n                                    _passed\n                                );\n\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\n                                clearData();\n                            }\n                        );\n                    } else {\n                        _fnBindDrag($params);\n                        _$scope.$safeApply(\n                            function () {\n                                _$scope.$callbacks.dragStop($params.dragInfo, false);\n                                clearData();\n                            }\n                        );\n                    }\n\n                }\n\n                function clearData() {\n                    $params.dragInfo.target.hidePlace();\n                    $params.dragInfo.target.targeting = false;\n\n                    $params.dragInfo = null;\n                    _$scope.$$apply  = false;\n                    _$scope.setDragging(null);\n                }\n\n                angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\n                angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\n                angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\n                angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\n                angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\n                angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\n            }\n\n            function _fnDragStartEvent(e, $params) {\n                if ($params.$scope.$callbacks.draggable()) {\n                    _fnDragStart(e, $params);\n                }\n            }\n\n            function _fnBindDrag($params) {\n                $params.element.bind(\n                    'touchstart mousedown', function (e) {\n                        $params.dragDelaying = true;\n                        $params.dragStarted  = false;\n                        _fnDragStartEvent(e, $params);\n                        $params.dragTimer = $timeout(\n                            function () {\n                                $params.dragDelaying = false;\n                            }, $params.$scope.dragDelay\n                        );\n                    }\n                );\n\n                $params.element.bind(\n                    'touchend touchcancel mouseup', function () {\n                        $timeout.cancel($params.dragTimer);\n                    }\n                );\n            }\n\n            function _fnKeydownHandler(e, $params) {\n                var _$scope = $params.$scope;\n                if (e.keyCode === 27) {\n                    if (_$scope.enabledStatus) {\n                        _$scope.hideStatus();\n                    }\n\n                    _$scope.$$apply = false;\n                    _fnDragEnd(e, $params);\n                } else {\n                    if (_$scope.enabledHotkey && e.shiftKey) {\n                        _$scope.enableMove(true);\n                        if (_$scope.enabledStatus) {\n                            _$scope.refreshStatus();\n                        }\n\n                        if (!$params.dragInfo) {\n                            return;\n                        }\n\n                        var _scope   = _$scope.getScope($params.dragInfo.node),\n                            _element = _scope.$element;\n\n                        if (_scope.isTable) {\n                            _$scope.for_all_descendants(\n                                $params.dragInfo.node, function (_node, _parent) {\n                                    _scope   = _$scope.getScope(_node);\n                                    _element = _scope && _scope.$element;\n                                    if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                        if (_$scope.$class.hidden) {\n                                            _element.addClass(_$scope.$class.hidden);\n                                        }\n                                    }\n                                    return _node.__visible__ === false || _node.__expanded__ === false\n\n                                }, null, true\n                            );\n                        } else {\n                            if (_$scope.$class.hidden) {\n                                _element.addClass(_$scope.$class.hidden);\n                            }\n                        }\n                    }\n                }\n            }\n\n            function _fnKeyupHandler(e, $params) {\n                var _$scope = $params.$scope;\n                if (_$scope.enabledHotkey && !e.shiftKey) {\n                    _$scope.enableMove(false);\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.refreshStatus();\n                    }\n\n                    if (!$params.dragInfo) {\n                        return;\n                    }\n\n                    var _scope   = _$scope.getScope($params.dragInfo.node),\n                        _element = _scope.$element;\n\n                    if (_scope.isTable) {\n                        _$scope.for_all_descendants(\n                            $params.dragInfo.node, function (_node, _parent) {\n                                _scope   = _$scope.getScope(_node);\n                                _element = _scope && _scope.$element;\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                                return _node.__visible__ === false || _node.__expanded__ === false\n                            }, null, true\n                        );\n                    } else {\n                        if (_$scope.$class.hidden) {\n                            _element.removeClass(_$scope.$class.hidden);\n                        }\n                    }\n                }\n            }\n\n            function _$init(scope, element, $window, $document) {\n                var $params        = {\n                        hasTouch:        'ontouchstart' in window,\n                        firstMoving:     null,\n                        dragInfo:        null,\n                        pos:             null,\n                        placeElm:        null,\n                        dragElm:         null,\n                        dragDelaying:    true,\n                        dragStarted:     false,\n                        dragTimer:       null,\n                        body:            document.body,\n                        html:            document.documentElement,\n                        document_height: null,\n                        document_width:  null,\n                        offsetEdge:      null,\n                        $scope:          scope,\n                        $window:         $window,\n                        $document:       $document,\n                        element:         element,\n                        bindDrag:        function () {\n                            _fnBindDrag($params);\n                        },\n                        dragEnd:         function (e) {\n                            _fnDragEnd(e, $params);\n                        },\n                        dragMoveEvent:   function (e) {\n                            _fnDragMove(e, $params);\n                        },\n                        dragEndEvent:    function (e) {\n                            scope.$$apply = true;\n                            _fnDragEnd(e, $params);\n                        },\n                        dragCancelEvent: function (e) {\n                            _fnDragEnd(e, $params);\n                        }\n                    },\n                    keydownHandler = function (e) {\n                        return _fnKeydownHandler(e, $params);\n                    },\n                    keyupHandler   = function (e) {\n                        return _fnKeyupHandler(e, $params);\n                    };\n\n                scope.dragEnd = function (e) {\n                    $params.dragEnd(e);\n                };\n\n                $params.bindDrag();\n\n                angular.element($window.document.body).bind('keydown', keydownHandler);\n                angular.element($window.document.body).bind('keyup', keyupHandler);\n                //unbind handler that retains scope\n                scope.$on(\n                    '$destroy', function () {\n                        angular.element($window.document.body).unbind('keydown', keydownHandler);\n                        angular.element($window.document.body).unbind('keyup', keyupHandler);\n                        if (scope.statusElm) {\n                            scope.statusElm.remove();\n                        }\n\n                        if (scope.placeElm) {\n                            scope.placeElm.remove();\n                        }\n                    }\n                );\n            }\n\n            return _$init;\n        }\n    ]);\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDControl', function () {\n        var _target, _parent,\n            i, len;\n\n        function fnSetCollapse(node) {\n            node.__expanded__ = false;\n        }\n\n        function fnSetExpand(node) {\n            node.__expanded__ = true;\n        }\n\n        function _$init(scope) {\n            var n, tree = {\n                selected_node:        null,\n                for_all_descendants:  scope.for_all_descendants,\n                select_node:          function (node) {\n                    if (!node) {\n                        if (tree.selected_node) {\n                            delete tree.selected_node.__selected__;\n                        }\n                        tree.selected_node = null;\n                        return null;\n                    }\n\n                    if (node !== tree.selected_node) {\n                        if (tree.selected_node) {\n                            delete tree.selected_node.__selected__;\n                        }\n                        node.__selected__  = true;\n                        tree.selected_node = node;\n                        tree.expand_all_parents(node);\n                        if (angular.isFunction(tree.on_select)) {\n                            tree.on_select(node);\n                        }\n                    }\n\n                    return node;\n                },\n                deselect_node:        function () {\n                    _target = null;\n                    if (tree.selected_node) {\n                        delete tree.selected_node.__selected__;\n                        _target            = tree.selected_node;\n                        tree.selected_node = null;\n                    }\n                    return _target;\n                },\n                get_parent:           function (node) {\n                    node = node || tree.selected_node;\n\n                    if (node && node.__parent_real__ !== null) {\n                        return scope.tree_nodes[node.__parent_real__];\n                    }\n                    return null;\n                },\n                for_all_ancestors:    function (node, fn) {\n                    _parent = tree.get_parent(node);\n                    if (_parent) {\n                        if (fn(_parent)) {\n                            return false;\n                        }\n\n                        return tree.for_all_ancestors(_parent, fn);\n                    }\n                    return true;\n                },\n                expand_all_parents:   function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        tree.for_all_ancestors(node, fnSetExpand);\n                    }\n                },\n                collapse_all_parents: function (node) {\n                    node = node || tree.selected_node;\n                    if (angular.isObject(node)) {\n                        tree.for_all_ancestors(node, fnSetCollapse);\n                    }\n                },\n\n                reload_data:                       function () {\n                    return scope.reload_data();\n                },\n                add_node:                          function (parent, new_node, index) {\n                    if (typeof index !== 'number') {\n                        if (parent) {\n                            parent.__children__.push(new_node);\n                            parent.__expanded__ = true;\n                        } else {\n                            scope.treeData.push(new_node);\n                        }\n                    } else {\n                        if (parent) {\n                            parent.__children__.splice(index, 0, new_node);\n                            parent.__expanded__ = true;\n                        } else {\n                            scope.treeData.splice(index, 0, new_node);\n                        }\n                    }\n                    return new_node;\n                },\n                add_node_root:                     function (new_node) {\n                    tree.add_node(null, new_node);\n                    return new_node;\n                },\n                expand_all:                        function () {\n                    len = scope.treeData.length;\n                    for (i = 0; i < len; i++) {\n                        tree.for_all_descendants(scope.treeData[i], fnSetExpand);\n                    }\n                },\n                collapse_all:                      function () {\n                    len = scope.treeData.length;\n                    for (i = 0; i < len; i++) {\n                        tree.for_all_descendants(scope.treeData[i], fnSetCollapse);\n                    }\n                },\n                remove_node:                       function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        if (node.__parent_real__ !== null) {\n                            _parent = tree.get_parent(node).__children__;\n                        } else {\n                            _parent = scope.treeData;\n                        }\n\n                        _parent.splice(node.__index__, 1);\n\n                        tree.reload_data();\n\n                        if (tree.selected_node === node) {\n                            tree.selected_node = null;\n                        }\n                    }\n                },\n                expand_node:                       function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node) && node.__expanded__) {\n                        node.__expanded__ = true;\n                        return node;\n                    }\n                },\n                collapse_node:                     function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        node.__expanded__ = false;\n                        return node;\n                    }\n                },\n                get_selected_node:                 function () {\n                    return tree.selected_node;\n                },\n                get_first_node:                    function () {\n                    len = scope.treeData.length;\n                    if (len > 0) {\n                        return scope.treeData[0];\n                    }\n\n                    return null;\n                },\n                get_children:                      function (node) {\n                    node = node || tree.selected_node;\n\n                    return node.__children__;\n                },\n                get_siblings:                      function (node) {\n                    node = node || tree.selected_node;\n                    if (angular.isObject(node)) {\n                        _parent = tree.get_parent(node);\n                        if (_parent) {\n                            _target = _parent.__children__;\n                        } else {\n                            _target = scope.treeData;\n                        }\n                        return _target;\n                    }\n                },\n                get_next_sibling:                  function (node) {\n                    node = node || tree.selected_node;\n                    if (angular.isObject(node)) {\n                        _target = tree.get_siblings(node);\n                        n       = _target.length;\n                        if (node.__index__ < n) {\n                            return _target[node.__index__ + 1];\n                        }\n                    }\n                },\n                get_prev_sibling:                  function (node) {\n                    node    = node || tree.selected_node;\n                    _target = tree.get_siblings(node);\n                    if (node.__index__ > 0) {\n                        return _target[node.__index__ - 1];\n                    }\n                },\n                get_first_child:                   function (node) {\n                    node = node || tree.selected_node;\n                    if (angular.isObject(node)) {\n                        _target = node.__children__;\n                        if (_target && _target.length > 0) {\n                            return node.__children__[0];\n                        }\n                    }\n                    return null;\n                },\n                get_closest_ancestor_next_sibling: function (node) {\n                    node    = node || tree.selected_node;\n                    _target = tree.get_next_sibling(node);\n                    if (_target) {\n                        return _target;\n                    }\n\n                    _parent = tree.get_parent(node);\n                    if (_parent) {\n                        return tree.get_closest_ancestor_next_sibling(_parent);\n                    }\n\n                    return null;\n                },\n                get_next_node:                     function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        _target = tree.get_first_child(node);\n                        if (_target) {\n                            return _target;\n                        } else {\n                            return tree.get_closest_ancestor_next_sibling(node);\n                        }\n                    }\n                },\n                get_prev_node:                     function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        _target = tree.get_prev_sibling(node);\n                        if (_target) {\n                            return tree.get_last_descendant(_target);\n                        }\n\n                        _parent = tree.get_parent(node);\n                        return _parent;\n                    }\n                },\n                get_last_descendant:               scope.getLastDescendant,\n                select_parent_node:                function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        _parent = tree.get_parent(node);\n                        if (_parent) {\n                            return tree.select_node(_parent);\n                        }\n                    }\n                },\n                select_first_node:                 function () {\n                    var firstNode = tree.get_first_node();\n                    return tree.select_node(firstNode);\n                },\n                select_next_sibling:               function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        _target = tree.get_next_sibling(node);\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n                select_prev_sibling:               function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        _target = tree.get_prev_sibling(node);\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n                select_next_node:                  function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        _target = tree.get_next_node(node);\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n                select_prev_node:                  function (node) {\n                    node = node || tree.selected_node;\n\n                    if (angular.isObject(node)) {\n                        _target = tree.get_prev_node(node);\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                }\n            };\n            angular.extend(scope.tree, tree);\n            return scope.tree;\n        }\n\n        return _$init;\n    });\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\n    ['$templateCache', function ($templateCache) {\n        $templateCache.put(\n            'template/TreeDnD/TreeDnD.html',\n            ['<table ng-class=\"$tree_class\">',\n             '    <thead>',\n             '  <tr>',\n             '     <th ng-class=\"expandingProperty.titleClass\" ng-style=\"expandingProperty.titleStyle\">',\n             '         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}',\n             '        <\\/th>',\n             '        <th ng-repeat=\"col in colDefinitions\" ng-class=\"col.titleClass\" ng-style=\"col.titleStyle\">',\n             '         {{col.displayName || col.field}}',\n             '     </th>',\n             '    </tr>',\n             '    </thead>',\n             ' <tbody tree-dnd-nodes>',\n             '  <tr tree-dnd-node=\"node\" ng-repeat=\"node in tree_nodes track by node.__hashKey__\" ',\n             '       ng-if=\"(node.__inited__ || node.__visible__)\"',\n             '       ng-click=\"onSelect(node)\" ',\n             '       ng-class=\"(node.__selected__ ? \\' active\\':\\'\\')\">',\n             '        <td tree-dnd-node-handle',\n             '          ng-style=\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {\\'padding-left\\': $callbacks.calsIndent(node.__level__)}\"',\n             '          ng-class=\"expandingProperty.cellClass\"',\n             '          compile=\"expandingProperty.cellTemplate\">',\n             '              <a data-nodrag>',\n             '                  <i ng-class=\"node.__icon_class__\" ng-click=\"toggleExpand(node)\"',\n             '                     class=\"tree-icon\"></i>',\n             '              </a>',\n             '             {{node[expandingProperty.field] || node[expandingProperty]}}',\n             '        </td>',\n             '        <td ng-repeat=\"col in colDefinitions\" ng-class=\"col.cellClass\" ng-style=\"col.cellStyle\"',\n             '            compile=\"col.cellTemplate\">',\n             '            {{node[col.field]}}',\n             '        </td>',\n             '    </tr>',\n             '    </tbody>',\n             '</table>'].join('\\n')\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusCopy.html',\n            '<label><i class=\"fa fa-copy\"></i>&nbsp;<b>Copying</b></label>'\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusMove.html',\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\n        );\n    }]\n);\n\n    function isUndefinedOrNull(val) {\n        return angular.isUndefined(val) || val === null;\n    }\n\n    function isDefined(val) {\n        return !(angular.isUndefined(val) || val === null);\n    }\n})();"]}