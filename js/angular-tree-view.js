// Generated by CoffeeScript 1.4.0
(function () {
    var clickNode, collapseAll, directiveDefinition, hideElement, makeAllVisible, searchFunc, searchTraverse, showElement, updateDom, updateVisibility;

    searchFunc = function (node, searchText) {
        if (node.searchText.search(searchText) === -1) {
            return false;
        } else {
            return true;
        }
    };

    makeAllVisible = function (node) {
        var child, _i, _len, _ref, _results;
        node.visible = true;
        if (node.nodes && node.nodes.length > 0) {
            _ref = node.nodes;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                child = _ref[_i];
                _results.push(makeAllVisible(child));
            }
            return _results;
        }
    };

    searchTraverse = function (node, searchText) {
        var child, found, _i, _len, _ref;
        node.visible = false;
        node.expandedFromSearch = false;
        if (searchFunc(node, searchText)) {
            makeAllVisible(node);
            node.expandedFromSearch = true;
            return true;
        } else if (node.nodes && node.nodes.length > 0) {
            found = false;
            _ref = node.nodes;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                child = _ref[_i];
                if (searchTraverse(child, searchText)) {
                    node.visible = true;
                    node.expandedFromSearch = true;
                    found = true;
                }
            }
            return found;
        }
    };

    updateVisibility = function (rootNode, searchText) {
        var node, _i, _j, _len, _len1, _results, _results1;
        if (!searchText) {
            _results = [];
            for (_i = 0, _len = rootNode.length; _i < _len; _i++) {
                node = rootNode[_i];
                makeAllVisible(node);
                _results.push(collapseAll(node, true));
            }
            return _results;
        } else {
            _results1 = [];
            for (_j = 0, _len1 = rootNode.length; _j < _len1; _j++) {
                node = rootNode[_j];
                _results1.push(searchTraverse(node, searchText.toLowerCase()));
            }
            return _results1;
        }
    };

    collapseAll = function (node, onlySearch) {
        var child, _i, _len, _ref, _results;
        if (onlySearch == null) {
            onlySearch = false;
        }
        if (!onlySearch) {
            node.expanded = false;
        }
        node.expandedFromSearch = false;
        if (node.nodes) {
            _ref = node.nodes;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                child = _ref[_i];
                _results.push(collapseAll(child));
            }
            return _results;
        }
    };

    hideElement = function (el) {
        return el.css('display', 'none');
    };

    showElement = function (el) {
        return el.css('display', 'block');
    };

    updateDom = function (node) {
        var child, _i, _len, _ref, _results;
        if (node.visible) {
            showElement(node.dom);
            if (node.bucket) {
                if (node.expanded || node.expandedFromSearch) {
                    showElement(node.bucket);
                    node.dom.addClass('tree-view-parent-expanded');
                } else {
                    hideElement(node.bucket);
                    node.dom.removeClass('tree-view-parent-expanded');
                }
            }
        } else {
            hideElement(node.dom);
        }
        if (node.nodes) {
            _ref = node.nodes;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                child = _ref[_i];
                _results.push(updateDom(child));
            }
            return _results;
        }
    };

    clickNode = function (node) {
        if (!node.expanded) {
            node.expanded = true;
            return showElement(node.bucket);
        } else {
            collapseAll(node);
            return updateDom(node);
        }
    };

    directiveDefinition = {
        restrict: "EA",
        scope: {
            search: "=searchModel",
            selected: "=ngModel",
            ngOnchange: "&",
            tree: "=?"
        },
        compile: function (cElement, cAttrs) {
            return {
                post: function (scope, element, attrs) {
                    var initializeNode, initializeTree;
                    element.addClass('tree-view');
                    scope.clipSize = attrs.clipSize ? parseInt(attrs.clipSize, 10) : 0;
                    initializeNode = function (node) {
                        var child, txt, _i, _len, _ref, _results;
                        node.visible = true;
                        node.expanded = false;
                        node.expandedFromSearch = false;
                        node.searchText = node.text.toLowerCase();
                        if (!scope.clipSize || node.text.length < scope.clipSize) {
                            node.visibleText = node.text;
                        } else {
                            node.visibleText = "" + (node.text.slice(0, scope.clipSize - 3)) + "...";
                        }
                        if (node.nodes && node.nodes.length > 0) {
                            node.icon = angular.element("<span class='tree-view-parent-icon'></span>");
                            node.dom = angular.element("<div class='tree-view-parent-node'></div>").append(node.icon);
                            node.bucket = angular.element("<div style='display:none;' class='tree-view-children'></div>");
                            txt = angular.element("<span class='tree-view-text'>" + node.visibleText + "</span>");
                            node.dom.append(txt).append(node.bucket);
                            node.parent.bucket.append(node.dom);
                            txt.bind("click", function () {
                                return clickNode(node);
                            });
                            node.icon.bind("click", function () {
                                return clickNode(node);
                            });
                            _ref = node.nodes;
                            _results = [];
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                child = _ref[_i];
                                child.parent = node;
                                _results.push(initializeNode(child));
                            }
                            return _results;
                        } else {
                            node.dom = angular.element("<div class='tree-view-leaf-node'>" + node.visibleText + "</div>");
                            node.parent.bucket.append(node.dom);
                            return node.dom.bind("click", function () {
                                scope.selectedNode = node;
                                return scope.$apply();
                            });
                        }
                    };
                    scope.$watch('selectedNode', function (newVal, oldVal) {
                        if (oldVal) {
                            oldVal.dom.removeClass('tree-view-leaf-node-selected');
                        }
                        if (newVal) {
                            newVal.dom.addClass('tree-view-leaf-node-selected');
                            return scope.selected = newVal.value || newVal.text;
                        }
                    });
                    initializeTree = function (tree) {
                        var node, _i, _len, _results;
                        element.children().remove();
                        tree.bucket = element;
                        _results = [];
                        for (_i = 0, _len = tree.length; _i < _len; _i++) {
                            node = tree[_i];
                            node.parent = tree;
                            _results.push(initializeNode(node));
                        }
                        return _results;
                    };
                    scope.$watch("search", function (search) {
                        var node, _i, _len, _ref, _results;
                        if (search !== void 0) {
                            updateVisibility(scope.tree, search.toLowerCase());
                            _ref = scope.tree;
                            _results = [];
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                node = _ref[_i];
                                _results.push(updateDom(node));
                            }
                            return _results;
                        }
                    });
                    return scope.$watch('tree', function (tree) {
                        return initializeTree(scope.tree);
                    });
                }
            };
        }
    };

    angular.module("treeView", []).directive("treeView", function () {
        return directiveDefinition;
    });

}).call(this);